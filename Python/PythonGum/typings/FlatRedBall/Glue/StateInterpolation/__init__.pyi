from __future__ import annotations
import typing
from typing import Any


class Back(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Bounce(typing.Any):
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Circular(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Cubic(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Elastic(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Exponential(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Instant(typing.Any):
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Linear(typing.Any):
    def EaseNone(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Quadratic(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Quartic(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Quintic(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Sinusoidal(typing.Any):
    def EaseIn(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EaseInOut(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class TweeningFunction(typing.Any):
    Method: typing.Any
    Target: typing.Any
    def Invoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def BeginInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EndInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetObjectData(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetInvocationList(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DynamicInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Clone(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class InterpolationType(int): ...

class Easing(int): ...

class Tweener(typing.Any):
    Position: typing.Any
    Duration: typing.Any
    elapsed: typing.Any
    Running: typing.Any
    Owner: typing.Any
    def GetInterpolationFunction(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Update(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Start(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Start(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Stop(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Reset(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Reset(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Reverse(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class PositionChangedHandler(typing.Any):
    Method: typing.Any
    Target: typing.Any
    def Invoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def BeginInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def EndInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetObjectData(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetInvocationList(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DynamicInvoke(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Clone(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
