from __future__ import annotations
import typing
from typing import Any


class GeneralResponse(typing.Any):
    SuccessfulResponse: typing.Any
    UnsuccessfulResponse: typing.Any
    Succeeded: typing.Any
    Message: typing.Any
    def UnsuccessfulWith(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Fail(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class OptionallyAttemptedGeneralResponse(typing.Any):
    SuccessfulWithoutAttempt: typing.Any
    UnsuccessfulWithoutAttempt: typing.Any
    SuccessfulAttempt: typing.Any
    DidAttempt: typing.Any
    Succeeded: typing.Any
    Message: typing.Any
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Fail(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class GeneralResponse`1(typing.Any):
    SuccessfulResponse: typing.Any
    UnsuccessfulResponse: typing.Any
    Data: typing.Any
    Succeeded: typing.Any
    Message: typing.Any
    def UnsuccessfulWith(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Fail(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class OptionallyAttemptedGeneralResponse`1(typing.Any):
    SuccessfulWithoutAttempt: typing.Any
    UnsuccessfulWithoutAttempt: typing.Any
    SuccessfulAttempt: typing.Any
    Data: typing.Any
    DidAttempt: typing.Any
    Succeeded: typing.Any
    Message: typing.Any
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Fail(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SetFrom(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class FileManager(typing.Any):
    ExeLocation: typing.Any
    RelativeDirectory: typing.Any
    UserApplicationData: typing.Any
    MyDocuments: typing.Any
    UserApplicationDataForThisApplication: typing.Any
    def AreSaveObjectsEqual(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CloneSaveObject(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CloneSaveObjectCast(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FileExists(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FileExists(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DirectoryExists(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FromFileText(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FromFileText(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetDirectory(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetExtension(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetWordAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetWordAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsRelative(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsRelativeTo(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def MakeAbsolute(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def MakeRelative(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def MakeRelative(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemoveDotDotSlash(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemoveExtension(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemovePath(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemovePath(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Standardize(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlDeserialize(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetStreamForFile(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlDeserializeFromStream(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetXmlSerializer(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DoesFileHaveSvnConflict(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlSerialize(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CopyFilesRecursively(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CopyFilesRecursively(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DeleteDirectory(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FindAndAddExtension(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def FromFileBytes(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetAllFilesInDirectory(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetAllFilesInDirectory(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetAllFilesInDirectory(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetStreamFromEmbeddedResource(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetStringFromEmbeddedResource(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetByteArrayFromEmbeddedResource(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetRecastedFileName(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetRootObjectType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SaveByteArray(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SaveEmbeddedResource(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SaveText(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SaveText(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlSerialize(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlSerialize(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def XmlDeserializeEmbeddedResource(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsUrl(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class FilePath(typing.Any):
    Original: typing.Any
    Extension: typing.Any
    StandardizedNoPathNoExtension: typing.Any
    CaseSensitiveNoPathNoExtension: typing.Any
    FileNameNoPath: typing.Any
    FullPath: typing.Any
    Standardized: typing.Any
    StandardizedCaseSensitive: typing.Any
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetDirectoryContainingThis(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Exists(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsRootOf(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemoveExtension(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CompareTo(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RelativeTo(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class ReflectionManager(typing.Any):
    def GetMembersOfType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class StringFunctions(typing.Any):
    def GetIntAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetIntAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetIntAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetWordAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetWordAfter(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def WildcardToRegex(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def AreListsEqual(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def AreArraysEqual(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Contains(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def MakeStringUnique(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IncrementNumberAtEnd(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def InsertSpacesInCamelCaseString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsValidHex(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CountOf(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CountOf(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CountOf(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ContainsNoAlloc(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ReplaceLine(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetStartAndEndOfLineContaining(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemoveWhitespace(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def IsNumber(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
