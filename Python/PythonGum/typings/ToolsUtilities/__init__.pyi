from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class GeneralResponse(typing.Any):
    @property
    def SuccessfulResponse(self) -> Any: ...
    @property
    def UnsuccessfulResponse(self) -> Any: ...
    @property
    def Succeeded(self) -> Any: ...
    @Succeeded.setter
    def Succeeded(self, value: Any) -> None: ...
    @property
    def Message(self) -> Any: ...
    @Message.setter
    def Message(self, value: Any) -> None: ...
    @staticmethod
    def UnsuccessfulWith(*args: Any, **kwargs: Any) -> Any: ...
    def Fail(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class OptionallyAttemptedGeneralResponse(typing.Any):
    @property
    def SuccessfulWithoutAttempt(self) -> Any: ...
    @property
    def UnsuccessfulWithoutAttempt(self) -> Any: ...
    @property
    def SuccessfulAttempt(self) -> Any: ...
    @property
    def DidAttempt(self) -> Any: ...
    @DidAttempt.setter
    def DidAttempt(self, value: Any) -> None: ...
    @property
    def Succeeded(self) -> Any: ...
    @Succeeded.setter
    def Succeeded(self, value: Any) -> None: ...
    @property
    def Message(self) -> Any: ...
    @Message.setter
    def Message(self, value: Any) -> None: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def Fail(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class GeneralResponse`1(typing.Any):
    @property
    def SuccessfulResponse(self) -> Any: ...
    @property
    def UnsuccessfulResponse(self) -> Any: ...
    @property
    def Data(self) -> Any: ...
    @Data.setter
    def Data(self, value: Any) -> None: ...
    @property
    def Succeeded(self) -> Any: ...
    @Succeeded.setter
    def Succeeded(self, value: Any) -> None: ...
    @property
    def Message(self) -> Any: ...
    @Message.setter
    def Message(self, value: Any) -> None: ...
    @staticmethod
    def UnsuccessfulWith(*args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def Fail(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class OptionallyAttemptedGeneralResponse`1(typing.Any):
    @property
    def SuccessfulWithoutAttempt(self) -> Any: ...
    @property
    def UnsuccessfulWithoutAttempt(self) -> Any: ...
    @property
    def SuccessfulAttempt(self) -> Any: ...
    @property
    def Data(self) -> Any: ...
    @Data.setter
    def Data(self, value: Any) -> None: ...
    @property
    def DidAttempt(self) -> Any: ...
    @DidAttempt.setter
    def DidAttempt(self, value: Any) -> None: ...
    @property
    def Succeeded(self) -> Any: ...
    @Succeeded.setter
    def Succeeded(self, value: Any) -> None: ...
    @property
    def Message(self) -> Any: ...
    @Message.setter
    def Message(self, value: Any) -> None: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def Fail(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class FileManager(typing.Any):
    @property
    def ExeLocation(self) -> Any: ...
    @property
    def RelativeDirectory(self) -> Any: ...
    @RelativeDirectory.setter
    def RelativeDirectory(self, value: Any) -> None: ...
    @property
    def UserApplicationData(self) -> Any: ...
    @property
    def MyDocuments(self) -> Any: ...
    @property
    def UserApplicationDataForThisApplication(self) -> Any: ...
    @staticmethod
    def AreSaveObjectsEqual(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CloneSaveObject(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CloneSaveObjectCast(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FileExists(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FileExists(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def DirectoryExists(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FromFileText(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FromFileText(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetDirectory(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetExtension(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetWordAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetWordAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IsRelative(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IsRelativeTo(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def MakeAbsolute(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def MakeRelative(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def MakeRelative(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemoveDotDotSlash(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemoveExtension(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemovePath(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemovePath(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def Standardize(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlDeserialize(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetStreamForFile(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlDeserializeFromStream(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetXmlSerializer(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def DoesFileHaveSvnConflict(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlSerialize(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CopyFilesRecursively(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CopyFilesRecursively(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def DeleteDirectory(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FindAndAddExtension(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def FromFileBytes(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetAllFilesInDirectory(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetAllFilesInDirectory(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetAllFilesInDirectory(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetStreamFromEmbeddedResource(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetStringFromEmbeddedResource(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetByteArrayFromEmbeddedResource(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetRecastedFileName(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetRootObjectType(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def SaveByteArray(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def SaveEmbeddedResource(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def SaveText(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def SaveText(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlSerialize(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlSerialize(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def XmlDeserializeEmbeddedResource(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IsUrl(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class FilePath(typing.Any):
    @property
    def Original(self) -> Any: ...
    @Original.setter
    def Original(self, value: Any) -> None: ...
    @property
    def Extension(self) -> Any: ...
    @Extension.setter
    def Extension(self, value: Any) -> None: ...
    @property
    def StandardizedNoPathNoExtension(self) -> Any: ...
    @property
    def CaseSensitiveNoPathNoExtension(self) -> Any: ...
    @property
    def FileNameNoPath(self) -> Any: ...
    @property
    def FullPath(self) -> Any: ...
    @FullPath.setter
    def FullPath(self, value: Any) -> None: ...
    @property
    def Standardized(self) -> Any: ...
    @Standardized.setter
    def Standardized(self, value: Any) -> None: ...
    @property
    def StandardizedCaseSensitive(self) -> Any: ...
    @StandardizedCaseSensitive.setter
    def StandardizedCaseSensitive(self, value: Any) -> None: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetDirectoryContainingThis(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def Exists(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsRootOf(self, *args: Any, **kwargs: Any) -> Any: ...
    def RemoveExtension(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def CompareTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def RelativeTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class ReflectionManager(typing.Any):
    @staticmethod
    def GetMembersOfType(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class StringFunctions(typing.Any):
    @staticmethod
    def GetIntAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetIntAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetIntAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetWordAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetWordAfter(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def WildcardToRegex(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def AreListsEqual(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def AreArraysEqual(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def Contains(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def MakeStringUnique(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IncrementNumberAtEnd(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def InsertSpacesInCamelCaseString(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IsValidHex(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CountOf(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CountOf(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CountOf(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ContainsNoAlloc(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ReplaceLine(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetStartAndEndOfLineContaining(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemoveWhitespace(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def IsNumber(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
