from __future__ import annotations
import typing
from typing import Any


class MathFunctions(typing.Any):
    def IsPowerOfTwo(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundToInt(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundToInt(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundToInt(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RotatePointAroundPoint(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RotatePointAroundPoint(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RotatePointAroundPoint(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundFloat(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundDouble(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundDouble(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RoundDecimal(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RotateVector(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Loop(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
