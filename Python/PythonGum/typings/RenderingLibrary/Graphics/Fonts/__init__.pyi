from __future__ import annotations
import typing
from typing import Any


class BmfcSave(typing.Any):
    FontCacheFileName: typing.Any
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Save(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetIfIsValidRange(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def TryFixRange(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetFontCacheFileNameFor(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CreateBitmapFontFilesIfNecessary(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CreateBitmapFontFilesIfNecessary(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def CreateBitmapFontFilesIfNecessaryAsync(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class <>c__DisplayClass19_0(typing.Any):
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
