from __future__ import annotations
import typing
from typing import Any


class IAnimatable(typing.Any):
    def AnimateSelf(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class InvisibleRenderable(typing.Any):
    IsRenderTarget: typing.Any
    AbsoluteVisible: typing.Any
    BlendState: typing.Any
    Children: typing.Any
    ClipsChildren: typing.Any
    Height: typing.Any
    Name: typing.Any
    Parent: typing.Any
    Rotation: typing.Any
    Tag: typing.Any
    Visible: typing.Any
    Width: typing.Any
    Wrap: typing.Any
    X: typing.Any
    Y: typing.Any
    Z: typing.Any
    FlipHorizontal: typing.Any
    Alpha: typing.Any
    def PreRender(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Render(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class IRenderable(typing.Any):
    BlendState: typing.Any
    Wrap: typing.Any
    def Render(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def PreRender(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class IRenderer(typing.Any):
    Camera: typing.Any
    Layers: typing.Any
    MainLayer: typing.Any
    def RenderLayer(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class ISetClipsChildren(typing.Any):
    ClipsChildren: typing.Any

class IText(typing.Any):
    DescenderHeight: typing.Any
    FontScale: typing.Any
    WrappedTextWidth: typing.Any
    WrappedTextHeight: typing.Any
    RawText: typing.Any
    Width: typing.Any
    TextOverflowVerticalMode: typing.Any
    def SetNeedsRefreshToTrue(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def UpdatePreRenderDimensions(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class ITextureCoordinate(typing.Any):
    SourceRectangle: typing.Any
    Wrap: typing.Any
    TextureWidth: typing.Any
    TextureHeight: typing.Any
    FlipHorizontal: typing.Any

class NineSliceSections(int): ...

class NineSliceExtensions(typing.Any):
    PossibleNineSliceEndings: typing.Any
    def GetIfShouldUsePattern(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetBareTextureForNineSliceTexture(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class RendererSettings(typing.Any):
    UseCustomEffectRendering: typing.Any
    UseBasicEffectRendering: typing.Any
    UsingEffect: typing.Any
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class ColorOperation(int): ...

class IAspectRatio(typing.Any):
    AspectRatio: typing.Any

class IRenderableIpso(typing.Any):
    IsRenderTarget: typing.Any
    Alpha: typing.Any
    ClipsChildren: typing.Any
    Parent: typing.Any
    Children: typing.Any
    ColorOperation: typing.Any
    def SetParentDirect(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class LayerCameraSettings(typing.Any):
    IsInScreenSpace: typing.Any
    Zoom: typing.Any
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Layer(typing.Any):
    ScissorIpso: typing.Any
    LayerCameraSettings: typing.Any
    Name: typing.Any
    Renderables: typing.Any
    ParentLayer: typing.Any
    SecondarySortOnY: typing.Any
    IsLinearFilteringEnabled: typing.Any
    def Add(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Remove(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SortRenderables(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ContainsRenderable(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ScreenToWorld(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class GradientType(int): ...

class IVisible(typing.Any):
    Visible: typing.Any
    AbsoluteVisible: typing.Any
    Parent: typing.Any

class SortableLayer(typing.Any):
    Wrap: typing.Any
    BlendState: typing.Any
    Z: typing.Any
    ScissorIpso: typing.Any
    LayerCameraSettings: typing.Any
    Name: typing.Any
    Renderables: typing.Any
    ParentLayer: typing.Any
    SecondarySortOnY: typing.Any
    IsLinearFilteringEnabled: typing.Any
    def Render(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Add(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Remove(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def SortRenderables(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ContainsRenderable(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ScreenToWorld(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class TextOverflowHorizontalMode(int): ...

class TextOverflowVerticalMode(int): ...

class VerticalAlignment(int): ...

class HorizontalAlignment(int): ...

class HorizontalAlignmentExtensionMethods(typing.Any):
    def Flip(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
