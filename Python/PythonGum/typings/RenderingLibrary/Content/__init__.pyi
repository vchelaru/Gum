from __future__ import annotations
import typing
from typing import Any


class IContentLoader(typing.Any):
    def LoadContent(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def TryLoadContent(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class LoaderManager(typing.Any):
    Self: typing.Any
    ContentLoader: typing.Any
    CacheTextures: typing.Any
    def LoadContent(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def TryLoadContent(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetDisposable(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def AddDisposable(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def DisposeAndClear(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Dispose(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def RemoveWithoutDisposing(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class <>c__DisplayClass18_0(typing.Any):
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
