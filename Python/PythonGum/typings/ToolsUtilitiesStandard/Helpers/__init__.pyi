from __future__ import annotations
import typing
from typing import Any


class ColorExtensions(typing.Any):
    def WithAlpha(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def WithRed(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def WithGreen(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def WithBlue(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class MathHelper(typing.Any):
    def ToRadians(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToDegrees(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Matrix4x4Extensions(typing.Any):
    def Up(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Down(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Right(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Left(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...

class Vector3Extensions(typing.Any):
    Up: typing.Any
    Down: typing.Any
    Left: typing.Any
    Right: typing.Any
    Forward: typing.Any
    Backward: typing.Any
    def ToVector2(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def Equals(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetHashCode(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def GetType(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
    def ToString(self, *args: typing.Any, **kwargs: typing.Any) -> typing.Any: ...
