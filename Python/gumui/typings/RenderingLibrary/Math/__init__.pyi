from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class MathFunctions(typing.Any):
    @staticmethod
    def IsPowerOfTwo(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundToInt(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundToInt(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundToInt(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RotatePointAroundPoint(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RotatePointAroundPoint(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RotatePointAroundPoint(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundFloat(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundDouble(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundDouble(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RoundDecimal(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RotateVector(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def Loop(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
