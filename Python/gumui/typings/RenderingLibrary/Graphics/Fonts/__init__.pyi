from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class BmfcSave(typing.Any):
    @property
    def FontCacheFileName(self) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Save(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetIfIsValidRange(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def TryFixRange(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetFontCacheFileNameFor(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def CreateBitmapFontFilesIfNecessary(*args: Any, **kwargs: Any) -> Any: ...
    def CreateBitmapFontFilesIfNecessary(self, *args: Any, **kwargs: Any) -> Any: ...
    def CreateBitmapFontFilesIfNecessaryAsync(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass19_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <CreateBitmapFontFilesIfNecessaryAsync>d__22(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <WaitForExitAsync>d__19(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
