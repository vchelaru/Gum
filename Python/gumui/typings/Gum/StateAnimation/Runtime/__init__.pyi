from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class AnimationRuntimeExtensions(typing.Any):
    @staticmethod
    def ToRuntime(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ToRuntime(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class AnimationRuntime(typing.Any):
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Loops(self) -> Any: ...
    @Loops.setter
    def Loops(self, value: Any) -> None: ...
    @property
    def Length(self) -> Any: ...
    @property
    def Keyframes(self) -> Any: ...
    @Keyframes.setter
    def Keyframes(self, value: Any) -> None: ...
    def RefreshCumulativeStates(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetStateToSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyAtTimeTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class KeyframeRuntime(typing.Any):
    @property
    def CachedCumulativeState(self) -> Any: ...
    @CachedCumulativeState.setter
    def CachedCumulativeState(self, value: Any) -> None: ...
    @property
    def StateName(self) -> Any: ...
    @StateName.setter
    def StateName(self, value: Any) -> None: ...
    @property
    def AnimationName(self) -> Any: ...
    @AnimationName.setter
    def AnimationName(self, value: Any) -> None: ...
    @property
    def EventName(self) -> Any: ...
    @EventName.setter
    def EventName(self, value: Any) -> None: ...
    @property
    def SubAnimation(self) -> Any: ...
    @SubAnimation.setter
    def SubAnimation(self, value: Any) -> None: ...
    @property
    def Time(self) -> Any: ...
    @Time.setter
    def Time(self, value: Any) -> None: ...
    @property
    def Length(self) -> Any: ...
    @property
    def InterpolationType(self) -> Any: ...
    @InterpolationType.setter
    def InterpolationType(self, value: Any) -> None: ...
    @property
    def Easing(self) -> Any: ...
    @Easing.setter
    def Easing(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass0_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass4_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass4_1(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass14_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass15_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass15_1(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass17_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass18_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass18_1(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
