from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class AnimatedStateSave(typing.Any):
    @property
    def StateName(self) -> Any: ...
    @StateName.setter
    def StateName(self, value: Any) -> None: ...
    @property
    def Time(self) -> Any: ...
    @Time.setter
    def Time(self, value: Any) -> None: ...
    @property
    def InterpolationType(self) -> Any: ...
    @InterpolationType.setter
    def InterpolationType(self, value: Any) -> None: ...
    @property
    def Easing(self) -> Any: ...
    @Easing.setter
    def Easing(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class AnimationReferenceSave(typing.Any):
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Time(self) -> Any: ...
    @Time.setter
    def Time(self, value: Any) -> None: ...
    @property
    def SourceObject(self) -> Any: ...
    @property
    def RootName(self) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class AnimationSave(typing.Any):
    @property
    def Loops(self) -> Any: ...
    @Loops.setter
    def Loops(self, value: Any) -> None: ...
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def States(self) -> Any: ...
    @States.setter
    def States(self, value: Any) -> None: ...
    @property
    def Animations(self) -> Any: ...
    @Animations.setter
    def Animations(self, value: Any) -> None: ...
    @property
    def Events(self) -> Any: ...
    @Events.setter
    def Events(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ElementAnimationReferenceSave(typing.Any):
    @property
    def AnimationName(self) -> Any: ...
    @AnimationName.setter
    def AnimationName(self, value: Any) -> None: ...
    @property
    def Time(self) -> Any: ...
    @Time.setter
    def Time(self, value: Any) -> None: ...
    @property
    def Loop(self) -> Any: ...
    @Loop.setter
    def Loop(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ElementAnimationsSave(typing.Any):
    @property
    def Animations(self) -> Any: ...
    @Animations.setter
    def Animations(self, value: Any) -> None: ...
    @property
    def ElementName(self) -> Any: ...
    @ElementName.setter
    def ElementName(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class NamedEventSave(typing.Any):
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Time(self) -> Any: ...
    @Time.setter
    def Time(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
