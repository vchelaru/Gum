from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class BehaviorInstanceSave(typing.Any):
    @property
    def Behaviors(self) -> Any: ...
    @Behaviors.setter
    def Behaviors(self, value: Any) -> None: ...
    @property
    def Locked(self) -> Any: ...
    @Locked.setter
    def Locked(self, value: Any) -> None: ...
    @property
    def ParentContainer(self) -> Any: ...
    @ParentContainer.setter
    def ParentContainer(self, value: Any) -> None: ...
    def ShouldSerializeLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def Clone(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class BehaviorReference(typing.Any):
    def ToBehaviorSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class BehaviorSave(typing.Any):
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def IsSourceFileMissing(self) -> Any: ...
    @IsSourceFileMissing.setter
    def IsSourceFileMissing(self, value: Any) -> None: ...
    @property
    def RequiredVariables(self) -> Any: ...
    @RequiredVariables.setter
    def RequiredVariables(self, value: Any) -> None: ...
    @property
    def Categories(self) -> Any: ...
    @Categories.setter
    def Categories(self, value: Any) -> None: ...
    @property
    def AllStates(self) -> Any: ...
    @property
    def RequiredInstances(self) -> Any: ...
    @RequiredInstances.setter
    def RequiredInstances(self, value: Any) -> None: ...
    @property
    def RequiredAnimations(self) -> Any: ...
    @RequiredAnimations.setter
    def RequiredAnimations(self, value: Any) -> None: ...
    @property
    def DefaultImplementation(self) -> Any: ...
    @DefaultImplementation.setter
    def DefaultImplementation(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Save(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ElementBehaviorReference(typing.Any):
    @property
    def ProjectName(self) -> Any: ...
    @ProjectName.setter
    def ProjectName(self, value: Any) -> None: ...
    @property
    def BehaviorName(self) -> Any: ...
    @BehaviorName.setter
    def BehaviorName(self, value: Any) -> None: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
