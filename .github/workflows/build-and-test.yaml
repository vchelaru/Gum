name: Build and Test

on:
  pull_request:
    branches: [master]

jobs:
  Build-and-Test:
    strategy:
      matrix:
      # We used to have ubuntu-latest here, but it can't build iOS, and it's easier to just use macos 
        os: [windows-latest, macos-15]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install workloads
        run: dotnet workload install wasm-tools-net8 ios android maui


      # I tried caching both NuGet packages and also cache on the actions/setup-dotnet@v4
      # In both cases the caching slowed down the total execution time.
      # Actually on further testing, it does seem like the NuGet cache can speed up the Windows
      # build by around 20-30 seconds. However, the script for it is a little confusing and it's
      # not a huge savings. Let's keep it simple and not use caching. 

      - name: Build Gum (Windows Only)
        if: runner.os == 'Windows'
        run: |
          dotnet restore "Gum.sln"
          dotnet build "Gum.sln" --configuration Release --no-restore --verbosity minimal -p:WarningLevel=0

      - name: Build AllLibraries
        run: |
          dotnet restore "AllLibraries.sln"
          dotnet build "AllLibraries.sln" --configuration Release --no-restore --verbosity minimal -p:WarningLevel=0

      - name: Build Generated Code Projects (Windows Only)
        if: runner.os == 'Windows'
        run: |
          dotnet restore "Tests/CodeGen_Maui_FullCodegen/CodeGen_Maui_FullCodegen.sln"
          dotnet build "Tests/CodeGen_Maui_FullCodegen/CodeGen_Maui_FullCodegen.sln" --configuration Debug --no-restore --verbosity minimal -p:WarningLevel=0

          dotnet restore "Tests/CodeGen_MonoGame_ByReference/CodeGen_MonoGame_ByReference.sln"
          dotnet build "Tests/CodeGen_MonoGame_ByReference/CodeGen_MonoGame_ByReference.sln" --configuration Debug --no-restore --verbosity minimal -p:WarningLevel=0

          dotnet restore "Tests/CodeGen_MonoGameForms_ByReference/CodeGenProject.sln"
          dotnet build "Tests/CodeGen_MonoGameForms_ByReference/CodeGenProject.sln" --configuration Debug --no-restore --verbosity minimal -p:WarningLevel=0

          dotnet restore "Tests/CodeGen_MonoGameForms_FullCodegen/CodeGen_MonoGameForms_FullCodegen.sln"
          dotnet build "Tests/CodeGen_MonoGameForms_FullCodegen/CodeGen_MonoGameForms_FullCodegen.sln" --configuration Debug --no-restore --verbosity minimal -p:WarningLevel=0

      - name: MonoGameGum.Tests
        run: dotnet test "MonoGameGum.Tests" --configuration Release --no-build --logger "trx" --results-directory "TestResults"
        continue-on-error: true

      - name: GumToolUnitTests (Windows Only)
        if: runner.os == 'Windows'
        run: dotnet test "Tool/Tests/GumToolUnitTests" --configuration Release --no-build --logger "trx" --results-directory "TestResults"
        continue-on-error: true

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        with:
          name: Tests ${{ matrix.os }}
          path: "TestResults/*.trx"
          reporter: dotnet-trx
          fail-on-error: true
