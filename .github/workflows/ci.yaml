name: Build All

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '8.0.x' ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      continue-on-error: false

    - name: Initialize Submodules
      run: git submodule update --init --recursive
      continue-on-error: false

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
      continue-on-error: false

    - name: Clear NuGet Cache
      run: dotnet nuget locals all --clear
      continue-on-error: false

    - name: Check Target Framework
      run: |
        Get-ChildItem -Path Samples -Recurse -Include *.csproj | ForEach-Object { 
          $framework = Select-String -Path $_.FullName -Pattern '<TargetFramework>(.*)</TargetFramework>' | % { $_.Matches.Groups[1].Value }
          if ($framework -notmatch '^net(6.0|8.0)(-.*)?$') { 
            Write-Error "Incompatible framework $framework in $_"
            exit 1 
          }
        }
      continue-on-error: false

    - name: Find and Restore Dependencies
      run: |
        Get-ChildItem -Path Samples -Recurse -Include *.sln | ForEach-Object { dotnet restore $_.FullName -v q; if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE } }
      continue-on-error: false

    - name: Build All
      run: |
        Get-ChildItem -Path Samples -Recurse -Include *.sln | ForEach-Object { dotnet build $_.FullName --configuration Release --no-restore -nologo -v q --property WarningLevel=0 -clp:ErrorsOnly; if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE } }
      continue-on-error: false