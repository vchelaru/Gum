# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .SonarQube

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: recursive # allows us to download kni and fna linked submodules
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage
      - name: Build and analyze
        shell: powershell
        run: |
          echo "::group::Start and Configure Scan"
          .\.sonar\scanner\dotnet-sonarscanner begin /o:"kaltinril" /k:"kaltinril_gum" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          echo "::endgroup::"
          
          echo "::group::Build"
          dotnet build .\AllLibraries.sln
          echo "::endgroup::"
          
          echo "::group::Test Coverage"
          dotnet-coverage collect "dotnet test ./MonoGameGum.Tests/MonoGameGum.Tests.csproj --no-build" -f xml -o "coverage.xml"
          echo "::endgroup::"
          
          echo "::group::Process Scan and Upload"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          echo "::endgroup::"
