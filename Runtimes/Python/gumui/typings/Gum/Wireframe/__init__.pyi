from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class TagInfo(typing.Any):
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class FoundTag(typing.Any):
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class BbCodeParser(typing.Any):
    @staticmethod
    def Parse(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def AddTags(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def RemoveTags(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class BindingContextChangedEventArgs(typing.Any):
    @property
    def OldBindingContext(self) -> Any: ...
    @OldBindingContext.setter
    def OldBindingContext(self, value: Any) -> None: ...
    @property
    def NewBindingContext(self) -> Any: ...
    @NewBindingContext.setter
    def NewBindingContext(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class BindableGue(typing.Any):
    @property
    def BindingContext(self) -> Any: ...
    @BindingContext.setter
    def BindingContext(self, value: Any) -> None: ...
    @property
    def BindingContextBindingPropertyOwner(self) -> Any: ...
    @BindingContextBindingPropertyOwner.setter
    def BindingContextBindingPropertyOwner(self, value: Any) -> None: ...
    @property
    def BindingContextBinding(self) -> Any: ...
    @BindingContextBinding.setter
    def BindingContextBinding(self, value: Any) -> None: ...
    @property
    def IsFontDirty(self) -> Any: ...
    @IsFontDirty.setter
    def IsFontDirty(self, value: Any) -> None: ...
    @property
    def IsLayoutSuspended(self) -> Any: ...
    @property
    def Categories(self) -> Any: ...
    @property
    def StackedRowOrColumnIndex(self) -> Any: ...
    @StackedRowOrColumnIndex.setter
    def StackedRowOrColumnIndex(self, value: Any) -> None: ...
    @property
    def StackedRowOrColumnDimensions(self) -> Any: ...
    @property
    def ElementSave(self) -> Any: ...
    @ElementSave.setter
    def ElementSave(self, value: Any) -> None: ...
    @property
    def Managers(self) -> Any: ...
    @property
    def EffectiveManagers(self) -> Any: ...
    @property
    def Visible(self) -> Any: ...
    @Visible.setter
    def Visible(self, value: Any) -> None: ...
    @property
    def Z(self) -> Any: ...
    @Z.setter
    def Z(self, value: Any) -> None: ...
    @property
    def Layer(self) -> Any: ...
    @property
    def IsRenderTarget(self) -> Any: ...
    @property
    def Alpha(self) -> Any: ...
    @property
    def XUnits(self) -> Any: ...
    @XUnits.setter
    def XUnits(self, value: Any) -> None: ...
    @property
    def YUnits(self) -> Any: ...
    @YUnits.setter
    def YUnits(self, value: Any) -> None: ...
    @property
    def XOrigin(self) -> Any: ...
    @XOrigin.setter
    def XOrigin(self, value: Any) -> None: ...
    @property
    def YOrigin(self) -> Any: ...
    @YOrigin.setter
    def YOrigin(self, value: Any) -> None: ...
    @property
    def WidthUnits(self) -> Any: ...
    @WidthUnits.setter
    def WidthUnits(self, value: Any) -> None: ...
    @property
    def HeightUnits(self) -> Any: ...
    @HeightUnits.setter
    def HeightUnits(self, value: Any) -> None: ...
    @property
    def IgnoredByParentSize(self) -> Any: ...
    @IgnoredByParentSize.setter
    def IgnoredByParentSize(self, value: Any) -> None: ...
    @property
    def ChildrenLayout(self) -> Any: ...
    @ChildrenLayout.setter
    def ChildrenLayout(self, value: Any) -> None: ...
    @property
    def AutoGridHorizontalCells(self) -> Any: ...
    @AutoGridHorizontalCells.setter
    def AutoGridHorizontalCells(self, value: Any) -> None: ...
    @property
    def AutoGridVerticalCells(self) -> Any: ...
    @AutoGridVerticalCells.setter
    def AutoGridVerticalCells(self, value: Any) -> None: ...
    @property
    def TextOverflowVerticalMode(self) -> Any: ...
    @TextOverflowVerticalMode.setter
    def TextOverflowVerticalMode(self, value: Any) -> None: ...
    @property
    def StackSpacing(self) -> Any: ...
    @StackSpacing.setter
    def StackSpacing(self, value: Any) -> None: ...
    @property
    def UseFixedStackChildrenSize(self) -> Any: ...
    @UseFixedStackChildrenSize.setter
    def UseFixedStackChildrenSize(self, value: Any) -> None: ...
    @property
    def Rotation(self) -> Any: ...
    @Rotation.setter
    def Rotation(self, value: Any) -> None: ...
    @property
    def FlipHorizontal(self) -> Any: ...
    @FlipHorizontal.setter
    def FlipHorizontal(self, value: Any) -> None: ...
    @property
    def X(self) -> Any: ...
    @X.setter
    def X(self, value: Any) -> None: ...
    @property
    def Y(self) -> Any: ...
    @Y.setter
    def Y(self, value: Any) -> None: ...
    @property
    def MaxWidth(self) -> Any: ...
    @MaxWidth.setter
    def MaxWidth(self, value: Any) -> None: ...
    @property
    def MinWidth(self) -> Any: ...
    @MinWidth.setter
    def MinWidth(self, value: Any) -> None: ...
    @property
    def Width(self) -> Any: ...
    @Width.setter
    def Width(self, value: Any) -> None: ...
    @property
    def MaxHeight(self) -> Any: ...
    @MaxHeight.setter
    def MaxHeight(self, value: Any) -> None: ...
    @property
    def MinHeight(self) -> Any: ...
    @MinHeight.setter
    def MinHeight(self, value: Any) -> None: ...
    @property
    def Height(self) -> Any: ...
    @Height.setter
    def Height(self, value: Any) -> None: ...
    @property
    def Parent(self) -> Any: ...
    @Parent.setter
    def Parent(self, value: Any) -> None: ...
    @property
    def ParentGue(self) -> Any: ...
    @ParentGue.setter
    def ParentGue(self, value: Any) -> None: ...
    @property
    def ElementGueContainingThis(self) -> Any: ...
    @ElementGueContainingThis.setter
    def ElementGueContainingThis(self, value: Any) -> None: ...
    @property
    def EffectiveParentGue(self) -> Any: ...
    @property
    def RenderableComponent(self) -> Any: ...
    @property
    def ContainedElements(self) -> Any: ...
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Children(self) -> Any: ...
    @property
    def Tag(self) -> Any: ...
    @Tag.setter
    def Tag(self, value: Any) -> None: ...
    @property
    def Component(self) -> Any: ...
    @property
    def AbsoluteX(self) -> Any: ...
    @property
    def AbsoluteLeft(self) -> Any: ...
    @property
    def AbsoluteY(self) -> Any: ...
    @property
    def AbsoluteTop(self) -> Any: ...
    @property
    def AbsoluteRight(self) -> Any: ...
    @property
    def AbsoluteBottom(self) -> Any: ...
    @property
    def ExplicitIVisibleParent(self) -> Any: ...
    @ExplicitIVisibleParent.setter
    def ExplicitIVisibleParent(self, value: Any) -> None: ...
    @property
    def TextureTop(self) -> Any: ...
    @TextureTop.setter
    def TextureTop(self, value: Any) -> None: ...
    @property
    def TextureLeft(self) -> Any: ...
    @TextureLeft.setter
    def TextureLeft(self, value: Any) -> None: ...
    @property
    def TextureWidth(self) -> Any: ...
    @TextureWidth.setter
    def TextureWidth(self, value: Any) -> None: ...
    @property
    def TextureHeight(self) -> Any: ...
    @TextureHeight.setter
    def TextureHeight(self, value: Any) -> None: ...
    @property
    def TextureWidthScale(self) -> Any: ...
    @TextureWidthScale.setter
    def TextureWidthScale(self, value: Any) -> None: ...
    @property
    def TextureHeightScale(self) -> Any: ...
    @TextureHeightScale.setter
    def TextureHeightScale(self, value: Any) -> None: ...
    @property
    def TextureAddress(self) -> Any: ...
    @TextureAddress.setter
    def TextureAddress(self, value: Any) -> None: ...
    @property
    def Wrap(self) -> Any: ...
    @Wrap.setter
    def Wrap(self, value: Any) -> None: ...
    @property
    def WrapsChildren(self) -> Any: ...
    @WrapsChildren.setter
    def WrapsChildren(self, value: Any) -> None: ...
    @property
    def ClipsChildren(self) -> Any: ...
    @ClipsChildren.setter
    def ClipsChildren(self, value: Any) -> None: ...
    @property
    def Animations(self) -> Any: ...
    @Animations.setter
    def Animations(self, value: Any) -> None: ...
    @property
    def IsFullyCreated(self) -> Any: ...
    @property
    def UseCustomFont(self) -> Any: ...
    @UseCustomFont.setter
    def UseCustomFont(self, value: Any) -> None: ...
    @property
    def CustomFontFile(self) -> Any: ...
    @CustomFontFile.setter
    def CustomFontFile(self, value: Any) -> None: ...
    @property
    def Font(self) -> Any: ...
    @Font.setter
    def Font(self, value: Any) -> None: ...
    @property
    def FontSize(self) -> Any: ...
    @FontSize.setter
    def FontSize(self, value: Any) -> None: ...
    @property
    def IsItalic(self) -> Any: ...
    @IsItalic.setter
    def IsItalic(self, value: Any) -> None: ...
    @property
    def IsBold(self) -> Any: ...
    @IsBold.setter
    def IsBold(self, value: Any) -> None: ...
    @property
    def UseFontSmoothing(self) -> Any: ...
    @UseFontSmoothing.setter
    def UseFontSmoothing(self, value: Any) -> None: ...
    @property
    def OutlineThickness(self) -> Any: ...
    @OutlineThickness.setter
    def OutlineThickness(self, value: Any) -> None: ...
    def RemoveFromManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetBinding(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ConvertValue(*args: Any, **kwargs: Any) -> Any: ...
    def GetAbsoluteWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAbsoluteHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def Render(self, *args: Any, **kwargs: Any) -> Any: ...
    def PlayAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def StopAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetContainedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def CreateChildrenRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def Clone(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetIfDimensionsDependOnChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentOffsets(self, *args: Any, **kwargs: Any) -> Any: ...
    def Dock(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetDock(self, *args: Any, **kwargs: Any) -> Any: ...
    def Anchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAnchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def AfterFullCreation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetInitialState(self, *args: Any, **kwargs: Any) -> Any: ...
    def PreRender(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetGueValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def MoveToLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetProperty(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyStateRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddStates(self, *args: Any, **kwargs: Any) -> Any: ...
    def InterpolateBetween(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsPointInside(self, *args: Any, **kwargs: Any) -> Any: ...
    def SuspendLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def ClearDirtyLayoutState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ResumeLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByType(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def RefreshTextOverflowVerticalMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateFontRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateToFontValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AnimateSelf(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateTextureValuesFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class RoutedEventArgs(typing.Any):
    @property
    def Handled(self) -> Any: ...
    @Handled.setter
    def Handled(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class InputEventArgs(typing.Any):
    @property
    def InputDevice(self) -> Any: ...
    @InputDevice.setter
    def InputDevice(self, value: Any) -> None: ...
    @property
    def Handled(self) -> Any: ...
    @Handled.setter
    def Handled(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class SelectionChangedEventArgs(typing.Any):
    @property
    def RemovedItems(self) -> Any: ...
    @RemovedItems.setter
    def RemovedItems(self, value: Any) -> None: ...
    @property
    def AddedItems(self) -> Any: ...
    @AddedItems.setter
    def AddedItems(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class InteractiveGue(typing.Any):
    @property
    def CurrentGameTime(self) -> Any: ...
    @CurrentGameTime.setter
    def CurrentGameTime(self, value: Any) -> None: ...
    @property
    def CurrentInputReceiver(self) -> Any: ...
    @CurrentInputReceiver.setter
    def CurrentInputReceiver(self, value: Any) -> None: ...
    @property
    def HasEvents(self) -> Any: ...
    @HasEvents.setter
    def HasEvents(self, value: Any) -> None: ...
    @property
    def ExposeChildrenEvents(self) -> Any: ...
    @ExposeChildrenEvents.setter
    def ExposeChildrenEvents(self, value: Any) -> None: ...
    @property
    def RaiseChildrenEventsOutsideOfBounds(self) -> Any: ...
    @RaiseChildrenEventsOutsideOfBounds.setter
    def RaiseChildrenEventsOutsideOfBounds(self, value: Any) -> None: ...
    @property
    def IsEnabled(self) -> Any: ...
    @IsEnabled.setter
    def IsEnabled(self, value: Any) -> None: ...
    @property
    def IsEnabledRecursively(self) -> Any: ...
    @property
    def FormsControlAsObject(self) -> Any: ...
    @FormsControlAsObject.setter
    def FormsControlAsObject(self, value: Any) -> None: ...
    @property
    def BindingContext(self) -> Any: ...
    @BindingContext.setter
    def BindingContext(self, value: Any) -> None: ...
    @property
    def BindingContextBindingPropertyOwner(self) -> Any: ...
    @property
    def BindingContextBinding(self) -> Any: ...
    @property
    def IsFontDirty(self) -> Any: ...
    @IsFontDirty.setter
    def IsFontDirty(self, value: Any) -> None: ...
    @property
    def IsLayoutSuspended(self) -> Any: ...
    @property
    def Categories(self) -> Any: ...
    @property
    def StackedRowOrColumnIndex(self) -> Any: ...
    @StackedRowOrColumnIndex.setter
    def StackedRowOrColumnIndex(self, value: Any) -> None: ...
    @property
    def StackedRowOrColumnDimensions(self) -> Any: ...
    @property
    def ElementSave(self) -> Any: ...
    @ElementSave.setter
    def ElementSave(self, value: Any) -> None: ...
    @property
    def Managers(self) -> Any: ...
    @property
    def EffectiveManagers(self) -> Any: ...
    @property
    def Visible(self) -> Any: ...
    @Visible.setter
    def Visible(self, value: Any) -> None: ...
    @property
    def Z(self) -> Any: ...
    @Z.setter
    def Z(self, value: Any) -> None: ...
    @property
    def Layer(self) -> Any: ...
    @property
    def IsRenderTarget(self) -> Any: ...
    @property
    def Alpha(self) -> Any: ...
    @property
    def XUnits(self) -> Any: ...
    @XUnits.setter
    def XUnits(self, value: Any) -> None: ...
    @property
    def YUnits(self) -> Any: ...
    @YUnits.setter
    def YUnits(self, value: Any) -> None: ...
    @property
    def XOrigin(self) -> Any: ...
    @XOrigin.setter
    def XOrigin(self, value: Any) -> None: ...
    @property
    def YOrigin(self) -> Any: ...
    @YOrigin.setter
    def YOrigin(self, value: Any) -> None: ...
    @property
    def WidthUnits(self) -> Any: ...
    @WidthUnits.setter
    def WidthUnits(self, value: Any) -> None: ...
    @property
    def HeightUnits(self) -> Any: ...
    @HeightUnits.setter
    def HeightUnits(self, value: Any) -> None: ...
    @property
    def IgnoredByParentSize(self) -> Any: ...
    @IgnoredByParentSize.setter
    def IgnoredByParentSize(self, value: Any) -> None: ...
    @property
    def ChildrenLayout(self) -> Any: ...
    @ChildrenLayout.setter
    def ChildrenLayout(self, value: Any) -> None: ...
    @property
    def AutoGridHorizontalCells(self) -> Any: ...
    @AutoGridHorizontalCells.setter
    def AutoGridHorizontalCells(self, value: Any) -> None: ...
    @property
    def AutoGridVerticalCells(self) -> Any: ...
    @AutoGridVerticalCells.setter
    def AutoGridVerticalCells(self, value: Any) -> None: ...
    @property
    def TextOverflowVerticalMode(self) -> Any: ...
    @TextOverflowVerticalMode.setter
    def TextOverflowVerticalMode(self, value: Any) -> None: ...
    @property
    def StackSpacing(self) -> Any: ...
    @StackSpacing.setter
    def StackSpacing(self, value: Any) -> None: ...
    @property
    def UseFixedStackChildrenSize(self) -> Any: ...
    @UseFixedStackChildrenSize.setter
    def UseFixedStackChildrenSize(self, value: Any) -> None: ...
    @property
    def Rotation(self) -> Any: ...
    @Rotation.setter
    def Rotation(self, value: Any) -> None: ...
    @property
    def FlipHorizontal(self) -> Any: ...
    @FlipHorizontal.setter
    def FlipHorizontal(self, value: Any) -> None: ...
    @property
    def X(self) -> Any: ...
    @X.setter
    def X(self, value: Any) -> None: ...
    @property
    def Y(self) -> Any: ...
    @Y.setter
    def Y(self, value: Any) -> None: ...
    @property
    def MaxWidth(self) -> Any: ...
    @MaxWidth.setter
    def MaxWidth(self, value: Any) -> None: ...
    @property
    def MinWidth(self) -> Any: ...
    @MinWidth.setter
    def MinWidth(self, value: Any) -> None: ...
    @property
    def Width(self) -> Any: ...
    @Width.setter
    def Width(self, value: Any) -> None: ...
    @property
    def MaxHeight(self) -> Any: ...
    @MaxHeight.setter
    def MaxHeight(self, value: Any) -> None: ...
    @property
    def MinHeight(self) -> Any: ...
    @MinHeight.setter
    def MinHeight(self, value: Any) -> None: ...
    @property
    def Height(self) -> Any: ...
    @Height.setter
    def Height(self, value: Any) -> None: ...
    @property
    def Parent(self) -> Any: ...
    @Parent.setter
    def Parent(self, value: Any) -> None: ...
    @property
    def ParentGue(self) -> Any: ...
    @ParentGue.setter
    def ParentGue(self, value: Any) -> None: ...
    @property
    def ElementGueContainingThis(self) -> Any: ...
    @ElementGueContainingThis.setter
    def ElementGueContainingThis(self, value: Any) -> None: ...
    @property
    def EffectiveParentGue(self) -> Any: ...
    @property
    def RenderableComponent(self) -> Any: ...
    @property
    def ContainedElements(self) -> Any: ...
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Children(self) -> Any: ...
    @property
    def Tag(self) -> Any: ...
    @Tag.setter
    def Tag(self, value: Any) -> None: ...
    @property
    def Component(self) -> Any: ...
    @property
    def AbsoluteX(self) -> Any: ...
    @property
    def AbsoluteLeft(self) -> Any: ...
    @property
    def AbsoluteY(self) -> Any: ...
    @property
    def AbsoluteTop(self) -> Any: ...
    @property
    def AbsoluteRight(self) -> Any: ...
    @property
    def AbsoluteBottom(self) -> Any: ...
    @property
    def ExplicitIVisibleParent(self) -> Any: ...
    @ExplicitIVisibleParent.setter
    def ExplicitIVisibleParent(self, value: Any) -> None: ...
    @property
    def TextureTop(self) -> Any: ...
    @TextureTop.setter
    def TextureTop(self, value: Any) -> None: ...
    @property
    def TextureLeft(self) -> Any: ...
    @TextureLeft.setter
    def TextureLeft(self, value: Any) -> None: ...
    @property
    def TextureWidth(self) -> Any: ...
    @TextureWidth.setter
    def TextureWidth(self, value: Any) -> None: ...
    @property
    def TextureHeight(self) -> Any: ...
    @TextureHeight.setter
    def TextureHeight(self, value: Any) -> None: ...
    @property
    def TextureWidthScale(self) -> Any: ...
    @TextureWidthScale.setter
    def TextureWidthScale(self, value: Any) -> None: ...
    @property
    def TextureHeightScale(self) -> Any: ...
    @TextureHeightScale.setter
    def TextureHeightScale(self, value: Any) -> None: ...
    @property
    def TextureAddress(self) -> Any: ...
    @TextureAddress.setter
    def TextureAddress(self, value: Any) -> None: ...
    @property
    def Wrap(self) -> Any: ...
    @Wrap.setter
    def Wrap(self, value: Any) -> None: ...
    @property
    def WrapsChildren(self) -> Any: ...
    @WrapsChildren.setter
    def WrapsChildren(self, value: Any) -> None: ...
    @property
    def ClipsChildren(self) -> Any: ...
    @ClipsChildren.setter
    def ClipsChildren(self, value: Any) -> None: ...
    @property
    def Animations(self) -> Any: ...
    @Animations.setter
    def Animations(self, value: Any) -> None: ...
    @property
    def IsFullyCreated(self) -> Any: ...
    @property
    def UseCustomFont(self) -> Any: ...
    @UseCustomFont.setter
    def UseCustomFont(self, value: Any) -> None: ...
    @property
    def CustomFontFile(self) -> Any: ...
    @CustomFontFile.setter
    def CustomFontFile(self, value: Any) -> None: ...
    @property
    def Font(self) -> Any: ...
    @Font.setter
    def Font(self, value: Any) -> None: ...
    @property
    def FontSize(self) -> Any: ...
    @FontSize.setter
    def FontSize(self, value: Any) -> None: ...
    @property
    def IsItalic(self) -> Any: ...
    @IsItalic.setter
    def IsItalic(self, value: Any) -> None: ...
    @property
    def IsBold(self) -> Any: ...
    @IsBold.setter
    def IsBold(self, value: Any) -> None: ...
    @property
    def UseFontSmoothing(self) -> Any: ...
    @UseFontSmoothing.setter
    def UseFontSmoothing(self, value: Any) -> None: ...
    @property
    def OutlineThickness(self) -> Any: ...
    @OutlineThickness.setter
    def OutlineThickness(self, value: Any) -> None: ...
    def CallClick(self, *args: Any, **kwargs: Any) -> Any: ...
    def CallRightClick(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallRollOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallDragging(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallRemoveAsPushed(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallRollOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallRollOver(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallHoverOver(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryCallPush(self, *args: Any, **kwargs: Any) -> Any: ...
    def HasCursorOver(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsInParentChain(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def AddNextPushAction(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def AddNextClickAction(*args: Any, **kwargs: Any) -> Any: ...
    def RemoveFromManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetBinding(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAbsoluteWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAbsoluteHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def Render(self, *args: Any, **kwargs: Any) -> Any: ...
    def PlayAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def StopAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetContainedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def CreateChildrenRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def Clone(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetIfDimensionsDependOnChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentOffsets(self, *args: Any, **kwargs: Any) -> Any: ...
    def Dock(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetDock(self, *args: Any, **kwargs: Any) -> Any: ...
    def Anchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAnchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def AfterFullCreation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetInitialState(self, *args: Any, **kwargs: Any) -> Any: ...
    def PreRender(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetGueValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def MoveToLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetProperty(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyStateRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddStates(self, *args: Any, **kwargs: Any) -> Any: ...
    def InterpolateBetween(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsPointInside(self, *args: Any, **kwargs: Any) -> Any: ...
    def SuspendLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def ClearDirtyLayoutState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ResumeLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByType(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def RefreshTextOverflowVerticalMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateFontRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateToFontValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AnimateSelf(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateTextureValuesFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class IInputReceiver(typing.Any):
    @property
    def ParentInputReceiver(self) -> Any: ...
    def OnGainFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def OnLoseFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def OnFocusUpdate(self, *args: Any, **kwargs: Any) -> Any: ...
    def OnFocusUpdatePreview(self, *args: Any, **kwargs: Any) -> Any: ...
    def DoKeyboardAction(self, *args: Any, **kwargs: Any) -> Any: ...

class InputDevice(IntEnum):
    TouchScreen = 1
    Mouse = 2

class Cursors(IntEnum):
    Arrow = 0
    SizeNESW = 1
    SizeNS = 2
    SizeNWSE = 3
    SizeWE = 4

class ICursor(typing.Any):
    @property
    def CustomCursor(self) -> Any: ...
    @CustomCursor.setter
    def CustomCursor(self, value: Any) -> None: ...
    @property
    def LastInputDevice(self) -> Any: ...
    @property
    def X(self) -> Any: ...
    @property
    def Y(self) -> Any: ...
    @property
    def LastPrimaryPushTime(self) -> Any: ...
    @property
    def LastPrimaryClickTime(self) -> Any: ...
    @property
    def XChange(self) -> Any: ...
    @property
    def YChange(self) -> Any: ...
    @property
    def ScrollWheelChange(self) -> Any: ...
    @property
    def ZVelocity(self) -> Any: ...
    @property
    def PrimaryPush(self) -> Any: ...
    @property
    def PrimaryDown(self) -> Any: ...
    @property
    def PrimaryClick(self) -> Any: ...
    @property
    def PrimaryClickNoSlide(self) -> Any: ...
    @property
    def PrimaryDoubleClick(self) -> Any: ...
    @property
    def PrimaryDoublePush(self) -> Any: ...
    @property
    def SecondaryPush(self) -> Any: ...
    @property
    def SecondaryDown(self) -> Any: ...
    @property
    def SecondaryClick(self) -> Any: ...
    @property
    def SecondaryDoubleClick(self) -> Any: ...
    @property
    def MiddlePush(self) -> Any: ...
    @property
    def MiddleDown(self) -> Any: ...
    @property
    def MiddleClick(self) -> Any: ...
    @property
    def MiddleDoubleClick(self) -> Any: ...
    @property
    def WindowPushed(self) -> Any: ...
    @WindowPushed.setter
    def WindowPushed(self, value: Any) -> None: ...
    @property
    def VisualRightPushed(self) -> Any: ...
    @VisualRightPushed.setter
    def VisualRightPushed(self, value: Any) -> None: ...
    @property
    def WindowOver(self) -> Any: ...
    @WindowOver.setter
    def WindowOver(self, value: Any) -> None: ...
    def XRespectingGumZoomAndBounds(self, *args: Any, **kwargs: Any) -> Any: ...
    def YRespectingGumZoomAndBounds(self, *args: Any, **kwargs: Any) -> Any: ...

class IInputReceiverKeyboard(typing.Any):
    @property
    def IsShiftDown(self) -> Any: ...
    @property
    def IsCtrlDown(self) -> Any: ...
    @property
    def IsAltDown(self) -> Any: ...
    def GetStringTyped(self, *args: Any, **kwargs: Any) -> Any: ...

class HandledActions(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class GueInteractiveExtensionMethods(typing.Any):
    @staticmethod
    def DoUiActivityRecursively(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def DoUiActivityRecursively(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class MissingFileBehavior(IntEnum):
    ConsumeSilently = 0
    ThrowException = 1

class Anchor(IntEnum):
    TopLeft = 0
    Top = 1
    TopRight = 2
    Left = 3
    Center = 4
    Right = 5
    BottomLeft = 6
    Bottom = 7
    BottomRight = 8

class Dock(IntEnum):
    Top = 0
    Left = 1
    Fill = 2
    Right = 3
    Bottom = 4
    FillHorizontally = 5
    FillVertically = 6
    SizeToChildren = 7

class GraphicalUiElement(typing.Any):
    @property
    def IsFontDirty(self) -> Any: ...
    @IsFontDirty.setter
    def IsFontDirty(self, value: Any) -> None: ...
    @property
    def IsLayoutSuspended(self) -> Any: ...
    @property
    def Categories(self) -> Any: ...
    @property
    def StackedRowOrColumnIndex(self) -> Any: ...
    @StackedRowOrColumnIndex.setter
    def StackedRowOrColumnIndex(self, value: Any) -> None: ...
    @property
    def StackedRowOrColumnDimensions(self) -> Any: ...
    @StackedRowOrColumnDimensions.setter
    def StackedRowOrColumnDimensions(self, value: Any) -> None: ...
    @property
    def MissingFileBehavior(self) -> Any: ...
    @MissingFileBehavior.setter
    def MissingFileBehavior(self, value: Any) -> None: ...
    @property
    def ElementSave(self) -> Any: ...
    @ElementSave.setter
    def ElementSave(self, value: Any) -> None: ...
    @property
    def Managers(self) -> Any: ...
    @property
    def EffectiveManagers(self) -> Any: ...
    @property
    def Visible(self) -> Any: ...
    @Visible.setter
    def Visible(self, value: Any) -> None: ...
    @property
    def CanvasWidth(self) -> Any: ...
    @CanvasWidth.setter
    def CanvasWidth(self, value: Any) -> None: ...
    @property
    def CanvasHeight(self) -> Any: ...
    @CanvasHeight.setter
    def CanvasHeight(self, value: Any) -> None: ...
    @property
    def Z(self) -> Any: ...
    @Z.setter
    def Z(self, value: Any) -> None: ...
    @property
    def Layer(self) -> Any: ...
    @property
    def IsRenderTarget(self) -> Any: ...
    @property
    def Alpha(self) -> Any: ...
    @property
    def XUnits(self) -> Any: ...
    @XUnits.setter
    def XUnits(self, value: Any) -> None: ...
    @property
    def YUnits(self) -> Any: ...
    @YUnits.setter
    def YUnits(self, value: Any) -> None: ...
    @property
    def XOrigin(self) -> Any: ...
    @XOrigin.setter
    def XOrigin(self, value: Any) -> None: ...
    @property
    def YOrigin(self) -> Any: ...
    @YOrigin.setter
    def YOrigin(self, value: Any) -> None: ...
    @property
    def WidthUnits(self) -> Any: ...
    @WidthUnits.setter
    def WidthUnits(self, value: Any) -> None: ...
    @property
    def HeightUnits(self) -> Any: ...
    @HeightUnits.setter
    def HeightUnits(self, value: Any) -> None: ...
    @property
    def IgnoredByParentSize(self) -> Any: ...
    @IgnoredByParentSize.setter
    def IgnoredByParentSize(self, value: Any) -> None: ...
    @property
    def ChildrenLayout(self) -> Any: ...
    @ChildrenLayout.setter
    def ChildrenLayout(self, value: Any) -> None: ...
    @property
    def AutoGridHorizontalCells(self) -> Any: ...
    @AutoGridHorizontalCells.setter
    def AutoGridHorizontalCells(self, value: Any) -> None: ...
    @property
    def AutoGridVerticalCells(self) -> Any: ...
    @AutoGridVerticalCells.setter
    def AutoGridVerticalCells(self, value: Any) -> None: ...
    @property
    def TextOverflowVerticalMode(self) -> Any: ...
    @TextOverflowVerticalMode.setter
    def TextOverflowVerticalMode(self, value: Any) -> None: ...
    @property
    def StackSpacing(self) -> Any: ...
    @StackSpacing.setter
    def StackSpacing(self, value: Any) -> None: ...
    @property
    def UseFixedStackChildrenSize(self) -> Any: ...
    @UseFixedStackChildrenSize.setter
    def UseFixedStackChildrenSize(self, value: Any) -> None: ...
    @property
    def Rotation(self) -> Any: ...
    @Rotation.setter
    def Rotation(self, value: Any) -> None: ...
    @property
    def FlipHorizontal(self) -> Any: ...
    @FlipHorizontal.setter
    def FlipHorizontal(self, value: Any) -> None: ...
    @property
    def X(self) -> Any: ...
    @X.setter
    def X(self, value: Any) -> None: ...
    @property
    def Y(self) -> Any: ...
    @Y.setter
    def Y(self, value: Any) -> None: ...
    @property
    def MaxWidth(self) -> Any: ...
    @MaxWidth.setter
    def MaxWidth(self, value: Any) -> None: ...
    @property
    def MinWidth(self) -> Any: ...
    @MinWidth.setter
    def MinWidth(self, value: Any) -> None: ...
    @property
    def Width(self) -> Any: ...
    @Width.setter
    def Width(self, value: Any) -> None: ...
    @property
    def MaxHeight(self) -> Any: ...
    @MaxHeight.setter
    def MaxHeight(self, value: Any) -> None: ...
    @property
    def MinHeight(self) -> Any: ...
    @MinHeight.setter
    def MinHeight(self, value: Any) -> None: ...
    @property
    def Height(self) -> Any: ...
    @Height.setter
    def Height(self, value: Any) -> None: ...
    @property
    def Parent(self) -> Any: ...
    @Parent.setter
    def Parent(self, value: Any) -> None: ...
    @property
    def ParentGue(self) -> Any: ...
    @ParentGue.setter
    def ParentGue(self, value: Any) -> None: ...
    @property
    def ElementGueContainingThis(self) -> Any: ...
    @ElementGueContainingThis.setter
    def ElementGueContainingThis(self, value: Any) -> None: ...
    @property
    def EffectiveParentGue(self) -> Any: ...
    @property
    def RenderableComponent(self) -> Any: ...
    @property
    def ContainedElements(self) -> Any: ...
    @property
    def Name(self) -> Any: ...
    @Name.setter
    def Name(self, value: Any) -> None: ...
    @property
    def Children(self) -> Any: ...
    @property
    def Tag(self) -> Any: ...
    @Tag.setter
    def Tag(self, value: Any) -> None: ...
    @property
    def Component(self) -> Any: ...
    @property
    def AbsoluteX(self) -> Any: ...
    @property
    def AbsoluteLeft(self) -> Any: ...
    @property
    def AbsoluteY(self) -> Any: ...
    @property
    def AbsoluteTop(self) -> Any: ...
    @property
    def AbsoluteRight(self) -> Any: ...
    @property
    def AbsoluteBottom(self) -> Any: ...
    @property
    def ExplicitIVisibleParent(self) -> Any: ...
    @ExplicitIVisibleParent.setter
    def ExplicitIVisibleParent(self, value: Any) -> None: ...
    @property
    def TextureTop(self) -> Any: ...
    @TextureTop.setter
    def TextureTop(self, value: Any) -> None: ...
    @property
    def TextureLeft(self) -> Any: ...
    @TextureLeft.setter
    def TextureLeft(self, value: Any) -> None: ...
    @property
    def TextureWidth(self) -> Any: ...
    @TextureWidth.setter
    def TextureWidth(self, value: Any) -> None: ...
    @property
    def TextureHeight(self) -> Any: ...
    @TextureHeight.setter
    def TextureHeight(self, value: Any) -> None: ...
    @property
    def TextureWidthScale(self) -> Any: ...
    @TextureWidthScale.setter
    def TextureWidthScale(self, value: Any) -> None: ...
    @property
    def TextureHeightScale(self) -> Any: ...
    @TextureHeightScale.setter
    def TextureHeightScale(self, value: Any) -> None: ...
    @property
    def TextureAddress(self) -> Any: ...
    @TextureAddress.setter
    def TextureAddress(self, value: Any) -> None: ...
    @property
    def Wrap(self) -> Any: ...
    @Wrap.setter
    def Wrap(self, value: Any) -> None: ...
    @property
    def WrapsChildren(self) -> Any: ...
    @WrapsChildren.setter
    def WrapsChildren(self, value: Any) -> None: ...
    @property
    def ClipsChildren(self) -> Any: ...
    @ClipsChildren.setter
    def ClipsChildren(self, value: Any) -> None: ...
    @property
    def Animations(self) -> Any: ...
    @Animations.setter
    def Animations(self, value: Any) -> None: ...
    @property
    def IsFullyCreated(self) -> Any: ...
    @IsFullyCreated.setter
    def IsFullyCreated(self, value: Any) -> None: ...
    @property
    def AreUpdatesAppliedWhenInvisible(self) -> Any: ...
    @AreUpdatesAppliedWhenInvisible.setter
    def AreUpdatesAppliedWhenInvisible(self, value: Any) -> None: ...
    @property
    def UseCustomFont(self) -> Any: ...
    @UseCustomFont.setter
    def UseCustomFont(self, value: Any) -> None: ...
    @property
    def CustomFontFile(self) -> Any: ...
    @CustomFontFile.setter
    def CustomFontFile(self, value: Any) -> None: ...
    @property
    def Font(self) -> Any: ...
    @Font.setter
    def Font(self, value: Any) -> None: ...
    @property
    def FontSize(self) -> Any: ...
    @FontSize.setter
    def FontSize(self, value: Any) -> None: ...
    @property
    def IsItalic(self) -> Any: ...
    @IsItalic.setter
    def IsItalic(self, value: Any) -> None: ...
    @property
    def IsBold(self) -> Any: ...
    @IsBold.setter
    def IsBold(self, value: Any) -> None: ...
    @property
    def UseFontSmoothing(self) -> Any: ...
    @UseFontSmoothing.setter
    def UseFontSmoothing(self, value: Any) -> None: ...
    @property
    def OutlineThickness(self) -> Any: ...
    @OutlineThickness.setter
    def OutlineThickness(self, value: Any) -> None: ...
    def GetAbsoluteWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAbsoluteHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def Render(self, *args: Any, **kwargs: Any) -> Any: ...
    def PlayAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def StopAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetContainedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def CreateChildrenRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def Clone(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetIfDimensionsDependOnChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentOffsets(self, *args: Any, **kwargs: Any) -> Any: ...
    def Dock(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetDock(self, *args: Any, **kwargs: Any) -> Any: ...
    def Anchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetAnchor(self, *args: Any, **kwargs: Any) -> Any: ...
    def AfterFullCreation(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetInitialState(self, *args: Any, **kwargs: Any) -> Any: ...
    def PreRender(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def SetGueValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsExposedVariable(self, *args: Any, **kwargs: Any) -> Any: ...
    def MoveToLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def RemoveFromManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def SetPropertyThroughReflection(*args: Any, **kwargs: Any) -> Any: ...
    def SetProperty(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyStateRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ApplyState(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddStates(self, *args: Any, **kwargs: Any) -> Any: ...
    def InterpolateBetween(self, *args: Any, **kwargs: Any) -> Any: ...
    def IsPointInside(self, *args: Any, **kwargs: Any) -> Any: ...
    def SuspendLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def ClearDirtyLayoutState(self, *args: Any, **kwargs: Any) -> Any: ...
    def ResumeLayout(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetGraphicalUiElementByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByType(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetChildByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByNameRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetParentByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def FillListWithChildrenByTypeRecursively(self, *args: Any, **kwargs: Any) -> Any: ...
    def RefreshTextOverflowVerticalMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateFontRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateToFontValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def AnimateSelf(self, *args: Any, **kwargs: Any) -> Any: ...
    def UpdateTextureValuesFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class GraphicalUiElementExtensions(typing.Any):
    @staticmethod
    def ApplyAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ApplyAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def ApplyAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def PlayAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def PlayAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetAnimation(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def GetAnimation(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class IManagedObject(typing.Any):
    def AddToManagers(self, *args: Any, **kwargs: Any) -> Any: ...
    def RemoveFromManagers(self, *args: Any, **kwargs: Any) -> Any: ...

class ElementWithState(typing.Any):
    @property
    def Element(self) -> Any: ...
    @Element.setter
    def Element(self, value: Any) -> None: ...
    @property
    def StateName(self) -> Any: ...
    @StateName.setter
    def StateName(self, value: Any) -> None: ...
    @property
    def CategorizedStates(self) -> Any: ...
    @CategorizedStates.setter
    def CategorizedStates(self, value: Any) -> None: ...
    @property
    def InstanceName(self) -> Any: ...
    @InstanceName.setter
    def InstanceName(self, value: Any) -> None: ...
    @property
    def StateSave(self) -> Any: ...
    @property
    def AllStates(self) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ElementWithStateExtensionMethods(typing.Any):
    @staticmethod
    def Add(*args: Any, **kwargs: Any) -> Any: ...
    @staticmethod
    def Remove(*args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class Tag(typing.Any):
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass1_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class VmToUiProperty(typing.Any):
    @property
    def Unassigned(self) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass37_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass42_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <GetAllBindableDescendants>d__44(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ChildType(IntEnum):
    Absolute = 1
    Relative = 2
    BothAbsoluteAndRelative = 3
    StackedWrapped = 4
    All = 7

class DirtyState(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class ParentUpdateType(IntEnum):
    None = 0
    IfParentStacks = 1
    IfParentWidthHeightDependOnChildren = 2
    IfParentIsAutoGrid = 4
    IfParentHasRatioSizedChildren = 8
    All = 16

class ParentChangedEventArgs(typing.Any):
    @property
    def OldValue(self) -> Any: ...
    @OldValue.setter
    def OldValue(self, value: Any) -> None: ...
    @property
    def NewValue(self) -> Any: ...
    @NewValue.setter
    def NewValue(self, value: Any) -> None: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass324_0(typing.Any):
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass380_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass381_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass382_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass383_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass384_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass6_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass21_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <get_AllStates>d__21(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass1_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
