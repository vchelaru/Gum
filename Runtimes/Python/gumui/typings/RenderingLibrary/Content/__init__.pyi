from __future__ import annotations
import typing
from typing import Any
from enum import IntEnum, IntFlag


class IContentLoader(typing.Any):
    def LoadContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryLoadContent(self, *args: Any, **kwargs: Any) -> Any: ...

class LoaderManager(typing.Any):
    @property
    def Self(self) -> Any: ...
    @property
    def ContentLoader(self) -> Any: ...
    @ContentLoader.setter
    def ContentLoader(self, value: Any) -> None: ...
    @property
    def CacheTextures(self) -> Any: ...
    @CacheTextures.setter
    def CacheTextures(self, value: Any) -> None: ...
    def LoadContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def TryLoadContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetDisposable(self, *args: Any, **kwargs: Any) -> Any: ...
    def AddDisposable(self, *args: Any, **kwargs: Any) -> Any: ...
    def DisposeAndClear(self, *args: Any, **kwargs: Any) -> Any: ...
    def Dispose(self, *args: Any, **kwargs: Any) -> Any: ...
    def RemoveWithoutDisposing(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...

class <>c__DisplayClass18_0(typing.Any):
    def GetType(self, *args: Any, **kwargs: Any) -> Any: ...
    def ToString(self, *args: Any, **kwargs: Any) -> Any: ...
    def Equals(self, *args: Any, **kwargs: Any) -> Any: ...
    def GetHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
