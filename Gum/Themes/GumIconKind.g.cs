// <auto-generated/>
using System;
using System.Linq;
using System.ComponentModel;
using System.Globalization;

namespace Gum.Themes;

[TypeConverter(typeof(GumIconKindConverter))]
public enum GumIconKind
{
    None = 0,
    XUnitsCenter, // x-units-center
    XUnitsLeft, // x-units-left
    XUnitsPercent, // x-units-percent
    XUnitsRight, // x-units-right
}

public static class GumIconKindMap
{
    private static readonly string[] _keys = new string[] {
        null, // None
        "x-units-center",
        "x-units-left",
        "x-units-percent",
        "x-units-right",
    };

    public static string? GetResourceKey(GumIconKind kind) =>
        (int)kind >= 0 && (int)kind < _keys.Length ? _keys[(int)kind] : null;
}

// Lets you write Icon="folder-star" or Icon="FolderStar" in XAML
public sealed class GumIconKindConverter : TypeConverter
{
    public override bool CanConvertFrom(ITypeDescriptorContext? ctx, Type t) =>
        t == typeof(string) || base.CanConvertFrom(ctx, t);

    public override object? ConvertFrom(ITypeDescriptorContext? ctx, CultureInfo? culture, object value)
    {
        if (value is string s)
        {
            // Accept raw filename-ish (folder-star), or enum token (FolderStar)
            var normalized = ToEnumTokenForConverter(s);
            if (Enum.TryParse<GumIconKind>(normalized, true, out var result))
                return result!;
        }
        return base.ConvertFrom(ctx, culture, value);
    }

    private static string ToEnumTokenForConverter(string name)
    {
        var parts = System.Text.RegularExpressions.Regex
            .Split(name, @"[^A-Za-z0-9]+")
            .Where(p => p.Length > 0)
            .Select(p => char.ToUpperInvariant(p[0]) + p.Substring(1));
        var token = string.Concat(parts);
        if (string.IsNullOrEmpty(token)) token = "Icon";
        if (char.IsDigit(token[0])) token = "_" + token;
        return token;
    }
}
