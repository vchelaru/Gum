<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:WpfDataUi.Controls;assembly=WpfDataUi"
    xmlns:controls2="clr-namespace:Gum.Controls"
    xmlns:converters="clr-namespace:Gum.Converters"
    xmlns:converters1="clr-namespace:Gum.Themes.Converters"
    xmlns:dialogs="clr-namespace:Gum.Services.Dialogs"
    xmlns:gum="clr-namespace:Gum"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:pt="http://propertytools.org/wpf"
    xmlns:system="clr-namespace:System;assembly=System.Runtime"
    xmlns:themes="clr-namespace:FlatRedBall.Glue.Themes"
    xmlns:themes1="clr-namespace:Gum.Themes"
    xmlns:windows="clr-namespace:Gum.Gui.Windows"
    xmlns:wpf="clr-namespace:FluentIcons.Wpf;assembly=FluentIcons.Wpf"
    xmlns:wpfdataui="clr-namespace:WpfDataUi;assembly=WpfDataUi"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/Frb.Styles.Variants.xaml" />
    </ResourceDictionary.MergedDictionaries>






    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="24" ResizeBorderThickness="6" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="WindowsFormsHost">
        <Setter Property="Background" Value="{DynamicResource Frb.Surface01}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="TextElement.FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type dialogs:DialogWindow}" />
    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type gum:MainWindow}" />
    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type windows:DeleteOptionsWindow}" />
    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type controls2:Spinner}" />

    <DataTemplate x:Key="ToggleButtonOptionDisplayOptionContentTemplate" DataType="{x:Type controls:ToggleButtonOptionDisplay+Option}">
        <wpf:FluentIcon FontSize="{Binding Source={StaticResource Scale}, Path=IconButton}" Icon="{Binding IconName}" />
    </DataTemplate>
    <DataTemplate x:Key="ToggleButtonOptionDisplayOptionContentTemplateGumIcon" DataType="{x:Type controls:ToggleButtonOptionDisplay+Option}">
        <controls2:GumIcon FontSize="{Binding Source={StaticResource Scale}, Path=IconButton}" Icon="{Binding GumIconName}" />
    </DataTemplate>

    <!-- <Style BasedOn="{StaticResource TopLevelControl}" TargetType="controls2:MainPanelControl"> -->
    <!--     <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Background}" /> -->
    <!-- </Style> -->






    <!--<Style TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
    <Setter Property="TextElement.Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
    <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary}" />
    <Setter Property="Template" Value="{StaticResource DefaultButtonBaseTemplate}" />
    <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary.Dark}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="themes:FrbButton.BorderCornerRadius" Value="0" />
    <Setter Property="TextElement.FontWeight" Value="Bold" />
    <Setter Property="TextElement.FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
    <Setter Property="Padding" Value="4,2,4,3" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Light}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Dark}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value=".75" />
      </Trigger>
    </Style.Triggers>
  </Style>

    -->
    <!-- <Style TargetType="{x:Type xctk:SplitButton}"> -->
    <!--     <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" /> -->
    <!--     <Setter Property="TextElement.Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" /> -->
    <!--     <Setter Property="Template"> -->
    <!--         <Setter.Value> -->
    <!--             <ControlTemplate TargetType="{x:Type xctk:SplitButton}"> -->
    <!--  <Border  -->
    <!--  Background="Transparent"  -->
    <!--  BorderBrush="{TemplateBinding BorderBrush}"  -->
    <!--  BorderThickness="1"  -->
    <!--  CornerRadius="2">  -->
    <!--                     <Grid> -->
    <!--                         <Grid.ColumnDefinitions> -->
    <!--                             <ColumnDefinition Width="*" /> -->
    <!--                             <ColumnDefinition Width="Auto" /> -->
    <!--                         </Grid.ColumnDefinitions> -->
    <!--    -->
    <!--  ~1~  Main Button  @1@  -->
    <!--  <Button  -->
    <!--  BorderBrush="{TemplateBinding BorderBrush}"  -->
    <!--  BorderThickness="0,0,1,0"  -->
    <!--  Command="{TemplateBinding Command}"  -->
    <!--  CommandParameter="{TemplateBinding CommandParameter}"  -->
    <!--  Content="{TemplateBinding Content}"  -->
    <!--  Grid.Column="0"  -->
    <!--  Margin="0"  -->
    <!--  Padding="3,1,3,1"  -->
    <!--  TextElement.Foreground="{TemplateBinding TextElement.Foreground}"  -->
    <!--  themes:FrbButton.BorderCornerRadius="0"  -->
    <!--  x:Name="PART_ActionButton">  -->
    <!--                             <Button.Style> -->
    <!--    -->
    <!--                                 <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}"> -->
    <!--                                     <Setter Property="Background" Value="Transparent" /> -->
    <!--                                     <Style.Triggers> -->
    <!--                                         <Trigger Property="IsMouseOver" Value="True"> -->
    <!--                                             <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Transparent}" /> -->
    <!--                                         </Trigger> -->
    <!--                                     </Style.Triggers> -->
    <!--                                 </Style> -->
    <!--                             </Button.Style> -->
    <!--                         </Button> -->
    <!--  ~1~  DropDown Button  @1@  -->
    <!--  <ToggleButton  -->
    <!--  Content="{materialDesign:PackIcon ChevronDown}"  -->
    <!--  Grid.Column="1"  -->
    <!--  IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  -->
    <!--  x:Name="PART_DropDownButton">  -->
    <!--                             <ToggleButton.Template> -->
    <!--                                 <ControlTemplate TargetType="ToggleButton"> -->
    <!--                                     <Border Background="{TemplateBinding Background}"> -->
    <!--                                         <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" /> -->
    <!--                                     </Border> -->
    <!--                                 </ControlTemplate> -->
    <!--                             </ToggleButton.Template> -->
    <!--                         </ToggleButton> -->
    <!--    -->
    <!--  ~1~  Popup Content  @1@  -->
    <!--  <Popup  -->
    <!--  AllowsTransparency="True"  -->
    <!--  IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}"  -->
    <!--  Margin="0,4,0,0"  -->
    <!--  Placement="Bottom"  -->
    <!--  StaysOpen="False"  -->
    <!--  x:Name="PART_Popup">  -->
    <!--  <Border  -->
    <!--  Background="{DynamicResource Frb.Surface01}"  -->
    <!--  BorderBrush="Gray"  -->
    <!--  BorderThickness="1"  -->
    <!--  CornerRadius="2"  -->
    <!--  MaxHeight="{TemplateBinding MaxDropDownHeight}"  -->
    <!--  Padding="4,8">  -->
    <!--                                 <ScrollViewer> -->
    <!--                                     <ContentPresenter ContentSource="DropDownContent" /> -->
    <!--                                 </ScrollViewer> -->
    <!--                             </Border> -->
    <!--                         </Popup> -->
    <!--                     </Grid> -->
    <!--                 </Border> -->
    <!--             </ControlTemplate> -->
    <!--         </Setter.Value> -->
    <!--     </Setter> -->
    <!--     <Style.Triggers> -->
    <!--         <Trigger Property="IsMouseOver" Value="True"> -->
    <!--             <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" /> -->
    <!--         </Trigger> -->
    <!--     </Style.Triggers> -->
    <!-- </Style> -->
    <!--







  <ControlTemplate x:Key="PopupContentClassicTemplate" TargetType="ContentControl">
    <ControlTemplate.Resources>
      <system:Double x:Key="PopupTopBottomMargin">2</system:Double>
    </ControlTemplate.Resources>
    <Grid MinWidth="{Binding Path=ContentMinWidth, RelativeSource={RelativeSource AncestorType=materialDesign:ComboBoxPopup}}" Margin="{Binding Path=ContentMargin, RelativeSource={RelativeSource AncestorType=materialDesign:ComboBoxPopup}}">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      <Border
        Background="Transparent"
        BorderBrush="{DynamicResource MaterialDesignShadowBrush}"
        BorderThickness="1"
        CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=materialDesign:ComboBoxPopup}}">
        <Border.Effect>
          <BlurEffect Radius="6" />
        </Border.Effect>
      </Border>
      <Border
        Margin="1"
        Background="{Binding ElementName=PART_Popup, Path=Background}"
        CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=materialDesign:ComboBoxPopup}}">
        <Grid SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Border Grid.Row="0" Height="{StaticResource PopupTopBottomMargin}" />
          <ContentPresenter Grid.Row="1" />
          <Border Grid.Row="2" Height="{StaticResource PopupTopBottomMargin}" />
        </Grid>
      </Border>
    </Grid>
  </ControlTemplate>




    -->
    <!-- <Style TargetType="{x:Type pt:TreeListBoxItem}" x:Key="ListBoxTreeItemStyle"> -->
    <!--   <Setter Property="BorderThickness" Value="1" /> -->
    <!--   <Setter Property="Padding" Value="{Binding LevelPadding, RelativeSource={RelativeSource Self}}" /> -->
    <!--   <Setter Property="Template"> -->
    <!--     <Setter.Value> -->
    <!--       <ControlTemplate TargetType="{x:Type pt:TreeListBoxItem}"> -->
    <!--         <Border x:Name="Bd" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"> -->
    <!--           <Border.Style> -->
    <!--             <Style TargetType="{x:Type Border}"> -->
    <!--               <Style.Triggers> -->
    <!--                 <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True"> -->
    <!--                   <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}"/> -->
    <!--                 </DataTrigger> -->
    <!--               </Style.Triggers> -->
    <!--             </Style> -->
    <!--           </Border.Style> -->
    <!--           <Border x:Name="Bd2" BorderThickness="1" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}"> -->
    <!--             <Grid> -->
    <!--               <Grid.ColumnDefinitions> -->
    <!--                 <ColumnDefinition Width="Auto" /> -->
    <!--                 <ColumnDefinition /> -->
    <!--               </Grid.ColumnDefinitions> -->
    <!--               <ToggleButton x:Name="Expander" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"> -->
    <!--                 <ToggleButton.Style> -->
    <!--                   <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ExpandCollapseToggleStyle}"> -->
    <!--                     <Style.Triggers> -->
    <!--                       <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}}" Value="False"> -->
    <!--                         <Setter Property="Visibility" Value="Hidden"/> -->
    <!--                       </DataTrigger> -->
    <!--                     </Style.Triggers> -->
    <!--                   </Style> -->
    <!--                 </ToggleButton.Style> -->
    <!--    -->
    <!--               </ToggleButton> -->
    <!--               <ContentPresenter Grid.Column="1" VerticalAlignment="Center"> -->
    <!--                 <ContentPresenter.InputBindings> -->
    <!--                   <MouseBinding Gesture="LeftDoubleClick" Command="{Binding ToggleExpandCommand, RelativeSource={RelativeSource TemplatedParent}}"/> -->
    <!--                 </ContentPresenter.InputBindings> -->
    <!--               </ContentPresenter> -->
    <!--             </Grid> -->
    <!--             <Border.Style> -->
    <!--               <Style TargetType="{x:Type Border}"> -->
    <!--                 <Style.Triggers> -->
    <!--                   <Trigger Property="IsMouseOver" Value="True"> -->
    <!--                     <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Transparent}"/> -->
    <!--                   </Trigger> -->
    <!--                 </Style.Triggers> -->
    <!--               </Style> -->
    <!--             </Border.Style> -->
    <!--           </Border> -->
    <!--         </Border> -->
    <!--       </ControlTemplate> -->
    <!--     </Setter.Value> -->
    <!--   </Setter> -->
    <!--    -->
    <!-- </Style> -->
    <!--    -->
    <!-- <Style TargetType="{x:Type pt:TreeListBox}"> -->
    <!--   <Setter Property="Background" Value="{DynamicResource Darken02}"/> -->
    <!--   <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}"/> -->
    <!--   <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}"/> -->
    <!--   <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxTreeItemStyle}"/> -->
    <!-- </Style> -->
    <!--

  <Style
    x:Key="ToolIcon"
    BasedOn="{StaticResource IconButton}"
    TargetType="{x:Type Button}">
    <Setter Property="Width" Value="18" />
    <Setter Property="Height" Value="18" />
  </Style>



  <Style BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}" TargetType="{x:Type materialDesign:PackIcon}">
    <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
  </Style>











  <Style x:Key="Toast" TargetType="{x:Type Border}">
    <Setter Property="BorderBrush" Value="{DynamicResource Frb.Surface01}" />
    <Setter Property="Background" Value="{DynamicResource Frb.Surface02}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="MinHeight" Value="50" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="CornerRadius" Value="8" />
    <Setter Property="Margin" Value="10" />
  </Style>










  <Style TargetType="{x:Type DataGrid}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="RowBackground" Value="Transparent" />
    <Setter Property="AlternatingRowBackground" Value="{DynamicResource Darken01}" />
    <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
    <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />


    <Setter Property="materialDesign:DataGridAssist.AutoGeneratedEditingTextStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TextBox}">
          <Setter Property="Padding" Value="0" />
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
          <Setter Property="Background" Value="Transparent" />
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="materialDesign:DataGridAssist.AutoGeneratedComboBoxStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
          <Setter Property="BorderThickness" Value="0" />
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="ColumnHeaderStyle">
      <Setter.Value>
        <Style TargetType="{x:Type DataGridColumnHeader}">
          <Style.Resources>

            <Style BasedOn="{StaticResource {x:Type Thumb}}" TargetType="Thumb">
              <Setter Property="Width" Value="8" />
              <Setter Property="Cursor" Value="SizeWE" />
              <Setter Property="Padding" Value="0" />
            </Style>
          </Style.Resources>
          <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary}" />
          <Setter Property="Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
          <Setter Property="TextElement.Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
          <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
          <Setter Property="BorderThickness" Value="0,0,1,0" />
          <Setter Property="Padding" Value="5,2" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                <Grid Background="Transparent">
                  <Border
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                      <ContentPresenter
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter.Resources>
                          <Style TargetType="TextBlock">
                            <Setter Property="TextTrimming" Value="WordEllipsis" />
                          </Style>
                        </ContentPresenter.Resources>
                      </ContentPresenter>
                    </Grid>
                  </Border>
                  <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" />
                  <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" />
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Light}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="RowHeaderStyle">
      <Setter.Value>
        <Style TargetType="{x:Type DataGridRowHeader}">
          <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary}" />
          <Setter Property="Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
          <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
          <Setter Property="BorderThickness" Value="0,0,1,0" />
          <Setter Property="Padding" Value="5,2" />
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="RowStyle">
      <Setter.Value>
        <Style TargetType="{x:Type DataGridRow}">
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
          <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="CellStyle">
      <Setter.Value>
        <Style TargetType="{x:Type DataGridCell}">
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
          <Setter Property="BorderBrush" Value="Transparent" />
          <Setter Property="BorderThickness" Value="1" />
          <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="materialDesign:DataGridAssist.ApplyMaterialDesignColumnStyles" Value="True" />
  </Style>









  <DataTemplate x:Key="ToggleButtonOptionDisplayOptionContentTemplate" DataType="{x:Type controls:ToggleButtonOptionDisplay+Option}">
    <wpf:FluentIcon FontSize="{Binding Source={StaticResource Scale}, Path=IconButton}" Icon="{Binding IconName}" />
  </DataTemplate>

  <Style TargetType="wpfDataUi1:DataUiGrid">
    <Style.Resources>
      <Style BasedOn="{StaticResource {x:Type Expander}}" TargetType="Expander">
        <Setter Property="materialDesign:ExpanderAssist.HeaderBackground" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="materialDesign:ExpanderAssist.HeaderFontSize" Value="{Binding Source={StaticResource Scale}, Path=H2}" />
      </Style>
    </Style.Resources>
  </Style>-->

</ResourceDictionary>
