<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Gum.Controls"
    xmlns:controls1="clr-namespace:WpfDataUi.Controls;assembly=WpfDataUi"
    xmlns:converters="clr-namespace:Gum.Themes.Converters"
    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:themes="clr-namespace:FlatRedBall.Glue.Themes"
    xmlns:themes1="clr-namespace:Gum.Themes"
    xmlns:variableGrid="clr-namespace:Gum.Plugins.VariableGrid"
    xmlns:wpf="clr-namespace:FluentIcons.Wpf;assembly=FluentIcons.Wpf"
    xmlns:wpfdataui="clr-namespace:WpfDataUi;assembly=WpfDataUi"
    xmlns:wpfdatauiTypes="clr-namespace:WpfDataUi.DataTypes;assembly=WpfDataUi">
    <ResourceDictionary.MergedDictionaries>

        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/Frb.Theming.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/Frb.Brushes.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/Frb.Buttons.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Gum;component/Themes/GumIcons.xaml" />

        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollViewer.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollBar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.toolbar.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type controls:GumIcon}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:GumIcon}">
                    <!--  FontSize drives the rendered size (like text)  -->
                    <Grid Width="{TemplateBinding FontSize}" Height="{TemplateBinding FontSize}">
                        <!--  Multi-color (DrawingImage/ImageSource) path  -->
                        <Image
                            x:Name="PART_Image"
                            Stretch="{TemplateBinding Stretch}"
                            Visibility="Collapsed" />

                        <!--  Single-color (Geometry) path; Fill comes from Foreground  -->
                        <Viewbox Stretch="{TemplateBinding Stretch}">
                            <Path
                                x:Name="PART_Path"
                                Fill="{TemplateBinding Foreground}"
                                Stretch="Uniform"
                                Visibility="Collapsed" />
                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="wpf:FluentIcon">
        <Setter Property="FontSize" Value="{Binding Source={StaticResource Scale}, Path=IconInline}" />
    </Style>

    <!--  TextBox  -->
    <Style BasedOn="{StaticResource MaterialDesignTextBox}" TargetType="TextBox">
        <Style.Resources>
            <SolidColorBrush x:Key="MaterialDesign.Brush.TextBox.HoverBorder" Color="{DynamicResource Frb.Colors.Border}" />
        </Style.Resources>
        <Setter Property="FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
        <Setter Property="md:TextFieldAssist.UnderlineBrush" Value="{DynamicResource Frb.Brushes.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="Padding" Value="3,0,3,1" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="CaretBrush" Value="{DynamicResource Frb.Brushes.Contrast02}" />
        <Setter Property="md:TextFieldAssist.DecorationVisibility" Value="Collapsed" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Background}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TextBlock  -->
    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
    </Style>

    <!--  Label  -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
    </Style>

    <!--  Button  -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
        <Setter Property="TextElement.Foreground" Value="{StaticResource Frb.Brushes.Primary.Contrast}" />
        <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary}" />
        <Setter Property="Template" Value="{StaticResource DefaultButtonBaseTemplate}" />
        <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary.Dark}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="themes:FrbButton.BorderCornerRadius" Value="0" />
        <Setter Property="TextElement.FontWeight" Value="Bold" />
        <Setter Property="TextElement.FontSize" Value="{Binding Source={StaticResource Scale}, Path=Body}" />
        <Setter Property="Padding" Value="4,2,4,3" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Light}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Dark}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".75" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ToggleButton  -->
    <Style BasedOn="{StaticResource IconButton}" TargetType="{x:Type ToggleButton}">
        <Style.Resources>
            <Style TargetType="{x:Type wpf:FluentIcon}">
                <Setter Property="FontSize" Value="{Binding Source={StaticResource Scale}, Path=IconButton}" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary.Light}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ToolTip  -->
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource Frb.Surface01}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast02}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
    </Style>

    <!--  Popup  -->
    <Style TargetType="{x:Type Popup}">
        <Setter Property="PopupAnimation" Value="Slide" />
    </Style>

    <!--  ScrollBar  -->
    <Style BasedOn="{StaticResource MaterialDesignScrollBar}" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarWidthKey}">8</system:Double>
            <system:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarHeightKey}">8</system:Double>
        </Style.Resources>
        <Setter Property="Foreground" Value="Green" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="8" />
        <Setter Property="Width" Value="8" />
        <Setter Property="md:ScrollBarAssist.ThumbCornerRadius" Value="4" />
        <Setter Property="md:ScrollBarAssist.ButtonsVisibility" Value="Collapsed" />
    </Style>

    <!--  Thumb  -->
    <Style TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        x:Name="PART_Border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RichTextBox  -->
    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
    </Style>


    <!--  CheckBox  -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid x:Name="root">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="Border"
                            Grid.Column="0"
                            Width="{TemplateBinding FontSize}"
                            Height="{TemplateBinding FontSize}"
                            Background="Transparent"
                            BorderBrush="{DynamicResource Frb.Brushes.Foreground.Subtle}"
                            BorderThickness="1"
                            CornerRadius="1"
                            Opacity="1.0" />

                        <!--  Checked visual  -->
                        <Path
                            x:Name="CheckMark"
                            Grid.Column="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="M 1 4 L 3 7 L 8 1"
                            Stroke="{TemplateBinding Foreground}"
                            StrokeThickness="2"
                            Visibility="Collapsed" />

                        <!--  Content  -->
                        <ContentPresenter
                            x:Name="presenter"
                            Grid.Column="1"
                            Margin="4,0,0,0"
                            VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  When the checkbox is checked  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!--  When the checkbox is unchecked  -->
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <!--  Mouse Over  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Frb.Brushes.Primary.Transparent}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ToolBarTray  -->
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource Frb.Surface01}" />
    </Style>

    <!--  ScrollViewer  -->
    <Style BasedOn="{StaticResource MaterialDesignScrollViewer}" TargetType="{x:Type ScrollViewer}" />

    <!--  ToolBar  -->
    <Style BasedOn="{StaticResource MaterialDesignToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Margin" Value="0,0,0,2" />
    </Style>

    <!--  ListBox  -->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Contrast01}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  RadioButton  -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Ellipse
                                x:Name="OuterEllipse"
                                Width="12"
                                Height="12"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="Transparent"
                                Stroke="{DynamicResource Frb.Brushes.Foreground}"
                                StrokeThickness="1" />
                            <Ellipse
                                x:Name="InnerEllipse"
                                Width="6"
                                Height="6"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="Transparent"
                                StrokeThickness="0" />
                        </Grid>
                        <ContentPresenter
                            Grid.Column="1"
                            Margin="4,0,0,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Content" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterEllipse" Property="Stroke" Value="{StaticResource Frb.Brushes.Primary}" />
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="{StaticResource Frb.Brushes.Primary.Transparent}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerEllipse" Property="Fill" Value="{StaticResource Frb.Brushes.Primary}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListBoxItem  -->
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        x:Name="Bd"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="true">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                        <Setter Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Border
                            x:Name="Bd2"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                            <ContentPresenter />
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{StaticResource Frb.Brushes.Primary.Transparent}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="red" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  GridSplitter  -->
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <!--  ComboBox  -->
    <Style TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Padding" Value="0,1" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="OverridesDefaultStyle" Value="False" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Padding" Value="2" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border
                                    x:Name="Border"
                                    Padding="3,2"
                                    BorderThickness="1">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" />
                                    </Trigger>
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Border" Property="Background" Value="{StaticResource Frb.Brushes.Primary.Transparent}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border
                        x:Name="RootBorder"
                        Height="{TemplateBinding Height}"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        ClipToBounds="True"
                        CornerRadius="0">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                x:Name="DropDownToggle"
                                Grid.Column="1"
                                Width="18"
                                VerticalAlignment="Stretch"
                                themes:FrbButton.BorderCornerRadius="0"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <md:PackIcon x:Name="DropDownIcon" Kind="ChevronDown" />
                            </ToggleButton>
                            <ToggleButton
                                x:Name="ContentToggle"
                                Grid.Column="0"
                                Background="Transparent"
                                BorderThickness="0"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                TextElement.FontSize="{TemplateBinding TextElement.FontSize}">

                                <ContentPresenter
                                    x:Name="ContentPresenter"
                                    Margin="3,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                            </ToggleButton>

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Grid.Column="0"
                                Margin="0,0,0,-1"
                                Padding="3,0,0,0"
                                VerticalAlignment="Stretch"
                                Background="Transparent"
                                BorderThickness="0"
                                CaretBrush="{StaticResource Frb.Brushes.Primary}"
                                Foreground="{TemplateBinding Foreground}"
                                Text="{TemplateBinding Text}" />

                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="True"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Opacity="1">
                                <Border
                                    x:Name="PopupBorder"
                                    Height="Auto"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    Padding="4"
                                    HorizontalAlignment="Stretch"
                                    Background="{DynamicResource Frb.Surface01}"
                                    BorderBrush="{DynamicResource Frb.Brushes.Contrast03}"
                                    BorderThickness="1"
                                    CornerRadius="3">

                                    <ScrollViewer
                                        x:Name="ScrollViewer"
                                        Padding="1"
                                        BorderThickness="0">
                                        <ItemsPresenter />
                                    </ScrollViewer>
                                </Border>
                            </Popup>

                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter TargetName="DropDownIcon" Property="Kind" Value="ChevronDown" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="DropDownIcon" Property="Kind" Value="ChevronUp" />
                        </Trigger>

                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentToggle" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="ContentToggle" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="RootBorder" Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RootBorder" Property="BorderBrush" Value="{StaticResource Frb.Brushes.Primary.Dark}" />
                            <Setter TargetName="DropDownIcon" Property="Foreground" Value="{StaticResource Frb.Brushes.Primary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  GroupBox  -->
    <Style TargetType="{x:Type GroupBox}">
        <Style.Resources>
            <ControlTemplate x:Key="template" TargetType="{x:Type GroupBox}">
                <ControlTemplate.Resources />
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="0"
                    SnapsToDevicePixels="True">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="0"
                            Padding="4,0,4,2"
                            HorizontalAlignment="Stretch"
                            Background="{TemplateBinding BorderBrush}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter ContentSource="Header" TextElement.Foreground="{TemplateBinding Foreground}">
                                <ContentPresenter.Resources>
                                    <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}" />
                                        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type GroupBox}}}" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </Border>
                        <ContentPresenter Grid.Row="1" Margin="{TemplateBinding Padding}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Style.Resources>
        <!--<Setter Property="Template" Value="{x:Null}"/>-->


        <!--  Default Style Properties  -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template" Value="{StaticResource template}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
    </Style>

    <!--  TreeViewItem  -->
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />

        <!--  Set Template  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <ControlTemplate.Resources>
                        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                            <Setter Property="Width" Value="16" />
                            <Setter Property="Height" Value="16" />
                            <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <md:PackIcon
                                            x:Name="ExpandIcon"
                                            Background="Transparent"
                                            Kind="chevronright"
                                            RenderTransformOrigin="0.5,0.5">
                                            <md:PackIcon.RenderTransform>
                                                <RotateTransform Angle="0" />
                                            </md:PackIcon.RenderTransform>
                                        </md:PackIcon>
                                        <ControlTemplate.Triggers>

                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True" />
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="ExpandIcon" Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary}" />
                                            </MultiTrigger>

                                            <Trigger Property="IsChecked" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation
                                                                Storyboard.TargetName="ExpandIcon"
                                                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                                From="0"
                                                                To="90"
                                                                Duration="0:0:0.15" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation
                                                                Storyboard.TargetName="ExpandIcon"
                                                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                                                From="90"
                                                                To="0"
                                                                Duration="0:0:0.15" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>

                                            </Trigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <StackPanel Grid.IsSharedSizeScope="True">
                        <Grid x:Name="ItemGrid">
                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto" SharedSizeGroup="ExpanderToggle" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <!--  Header row  -->
                            <ToggleButton
                                x:Name="Expander"
                                Grid.Column="0"
                                ClickMode="Press"
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource ExpandCollapseToggleStyle}" />

                            <Border
                                x:Name="Bd"
                                Grid.Column="1"
                                Padding="2,0"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                                <ContentPresenter
                                    x:Name="PART_Header"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    ContentSource="Header" />
                            </Border>


                        </Grid>
                        <!--  Children row reusing shared expander column  -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="ExpanderToggle" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" />
                        </Grid>
                    </StackPanel>



                    <!--  ControlTemplate Triggers  -->
                    <ControlTemplate.Triggers>
                        <!--  Trigger to collapse ItemsPresenter when IsExpanded is false  -->
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Trigger for IsSelected  -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Primary}" />
                        </Trigger>

                        <!--  Trigger for IsMouseOver  -->
                        <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                        </Trigger>

                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TreeView  -->
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ScrollViewer" Focusable="false">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Expander  -->
    <Style TargetType="Expander">
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="ExpandDirection" Value="Down" />
        <Setter Property="md:ExpanderAssist.HeaderBackground" Value="{DynamicResource Frb.Brushes.Contrast01}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontSize="{Binding Path=(md:ExpanderAssist.HeaderFontSize), RelativeSource={RelativeSource FindAncestor, AncestorType=Expander}}" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ToggleButton
                                x:Name="Header"
                                HorizontalAlignment="Stretch"
                                HorizontalContentAlignment="Left"
                                themes:FrbButton.BorderCornerRadius="0"
                                Background="{Binding Path=(md:ExpanderAssist.HeaderBackground), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="0"
                                Foreground="{DynamicResource Frb.Brushes.Foreground}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <md:PackIcon
                                            x:Name="ExpandIcon"
                                            Grid.Column="0"
                                            Height="16"
                                            Margin="4,0,4,0"
                                            VerticalAlignment="Center"
                                            Foreground="{TemplateBinding Foreground}"
                                            Kind="ChevronRight"
                                            RenderTransformOrigin="0.5,0.5">
                                            <md:PackIcon.RenderTransform>
                                                <RotateTransform Angle="0" />
                                            </md:PackIcon.RenderTransform>
                                        </md:PackIcon>
                                        <ContentPresenter
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Header}"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" />
                                    </Grid>
                                </Border>

                            </ToggleButton>

                            <Border Grid.Row="1" Padding="{TemplateBinding Padding}">
                                <ContentPresenter
                                    x:Name="ContentSite"
                                    Margin="0,2,0,0"
                                    Focusable="False"
                                    Visibility="Collapsed" />
                            </Border>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="Header" Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Primary}" />
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandIcon"
                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                            From="0"
                                            To="90"
                                            Duration="0:0:0.15" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandIcon"
                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(RotateTransform.Angle)"
                                            From="90"
                                            To="0"
                                            Duration="0:0:0.15" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Outer menu  -->
    <Style TargetType="{x:Type ContextMenu}">
        <Style.Resources>
            <!--  SubmenuItem  -->

            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border Name="Border">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            Name="Icon"
                            Width="16"
                            Height="16"
                            Margin="6,0,6,0"
                            VerticalAlignment="Center"
                            ContentSource="Icon" />
                        <Border
                            Name="Check"
                            Width="13"
                            Height="13"
                            Margin="6,0,6,0"
                            Background="Transparent"
                            BorderBrush="{DynamicResource Frb.Brushes.Foreground}"
                            BorderThickness="1"
                            Visibility="Collapsed">
                            <Path
                                Name="CheckMark"
                                Width="7"
                                Height="7"
                                Data="M 0 0 L 7 7 M 0 7 L 7 0"
                                SnapsToDevicePixels="False"
                                Stroke="{DynamicResource Frb.Brushes.Foreground}"
                                StrokeThickness="2"
                                Visibility="Hidden" />
                        </Border>
                        <ContentPresenter
                            Name="HeaderHost"
                            Grid.Column="1"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                        <TextBlock
                            x:Name="InputGestureText"
                            Grid.Column="2"
                            Margin="5,2,0,2"
                            DockPanel.Dock="Right"
                            Text="{TemplateBinding InputGestureText}" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsCheckable" Value="true">
                        <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground.Disabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--  SubmenuHeader  -->

            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
                <Border Name="Border">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            Name="Icon"
                            Width="16"
                            Height="16"
                            Margin="6,0,6,0"
                            VerticalAlignment="Center"
                            ContentSource="Icon" />
                        <ContentPresenter
                            Name="HeaderHost"
                            Grid.Column="1"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                        <TextBlock
                            x:Name="InputGestureText"
                            Grid.Column="2"
                            Margin="5,2,2,2"
                            DockPanel.Dock="Right"
                            Text="{TemplateBinding InputGestureText}" />
                        <Path
                            Grid.Column="3"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="M 0 0 L 0 7 L 4 3.5 Z"
                            Fill="{DynamicResource Frb.Brushes.Foreground}" />
                        <Popup
                            Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            HorizontalOffset="-4"
                            IsOpen="{TemplateBinding IsSubmenuOpen}"
                            Placement="Right"
                            PopupAnimation="Slide">
                            <Border
                                Name="SubmenuBorder"
                                Background="{DynamicResource Frb.Surface01}"
                                BorderBrush="{DynamicResource Frb.Brushes.Contrast03}"
                                BorderThickness="1"
                                SnapsToDevicePixels="True">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Border>
                        </Popup>
                    </Grid>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                    </Trigger>
                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4" />
                        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground.Disabled}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">

                    <!--  Here is where you change the border thickness to zero on the menu  -->
                    <Border
                        x:Name="Border"
                        Padding="4"
                        Background="{DynamicResource Frb.Surface01}"
                        BorderBrush="{DynamicResource Frb.Brushes.Contrast03}"
                        BorderThickness="1"
                        CornerRadius="2">
                        <StackPanel
                            ClipToBounds="True"
                            IsItemsHost="True"
                            Orientation="Vertical" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Slider  -->
    <Style TargetType="Slider">
        <Style.Resources>
            <ControlTemplate x:Key="SliderThumbTemplate" TargetType="Slider">
                <ControlTemplate.Resources>
                    <Style x:Key="SliderRepeatButtonStyle" TargetType="RepeatButton">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="RepeatButton">
                                    <Border Background="Transparent" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ControlTemplate.Resources>
                <Grid>
                    <Border
                        Height="4"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4"
                        Opacity="0.4" />
                    <Track x:Name="PART_Track">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonStyle}" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="Thumb">
                                <Thumb.Style>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <ScaleTransform ScaleX="1" ScaleY="1" />
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Padding="2" Background="Transparent">
                                                        <Border
                                                            Width="12"
                                                            Height="12"
                                                            VerticalAlignment="Center"
                                                            Background="{TemplateBinding Foreground}"
                                                            CornerRadius="16" />
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Track.Thumb>
                    </Track>
                </Grid>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary}" />
        <Setter Property="Background" Value="{DynamicResource Frb.Brushes.Primary}" />
        <Setter Property="Template" Value="{StaticResource SliderThumbTemplate}" />

    </Style>

    <Style x:Key="Frb.Styles.TabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Resources>
                        <LinearGradientBrush x:Key="ActiveBackground" StartPoint="0,0" EndPoint="0,1">
                            <GradientStop Offset="0" Color="#1AFFFFFF" />
                            <!--  0.1 opacity (1A hex)  -->
                            <GradientStop Offset="0" Color="Transparent" />
                            <!--  0.2 opacity (33 hex)  -->
                        </LinearGradientBrush>
                    </ControlTemplate.Resources>
                    <Grid x:Name="RootGrid">
                        <Border
                            x:Name="Border"
                            Margin="0,0,0,0"
                            Padding="8,2,8,2"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="0,0,0,2"
                            CornerRadius="0,0,0,0">
                            <Grid>
                                <ContentPresenter
                                    x:Name="ContentSite"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    RecognizesAccessKey="True"
                                    TextElement.FontWeight="Bold"
                                    TextElement.Foreground="{TemplateBinding TextElement.Foreground}">
                                    <ContentPresenter.Resources>
                                        <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
                                            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                                <md:PackIcon
                                    x:Name="TruncationIcon"
                                    Kind="{TemplateBinding themes1:FrbTabControl.TruncationIcon}"
                                    Visibility="Collapsed" />
                            </Grid>

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Primary.Transparent}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Primary}" />
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />

                            <!--<Setter TargetName="Border" Property="Background" Value="{StaticResource ActiveBackground}" />-->
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(themes1:FrbTabControl.TruncationIcon), RelativeSource={RelativeSource Self}, Converter={StaticResource NotNullToBoolConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=(themes1:FrbTabControl.MaxTabWidth), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Converter={StaticResource LessThanConverter}, ConverterParameter=54}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TruncationIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TabControl  -->
    <Style TargetType="{x:Type TabControl}">
        <Style.Resources>
            <converters:TabItemWidthMultiConverter x:Key="TabItemWidthMultiConverter" />
        </Style.Resources>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="themes1:FrbTabControl.PreferTabTruncation" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="0"
                            BorderBrush="{DynamicResource Frb.Brushes.Primary}"
                            BorderThickness="0">

                            <TabPanel
                                Panel.ZIndex="1"
                                Background="Transparent"
                                IsItemsHost="True" />
                        </Border>
                        <Border
                            Grid.Row="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource Frb.Brushes.Contrast01}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource Frb.Styles.TabItem}" TargetType="{x:Type TabItem}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=(themes1:FrbTabControl.PreferTabTruncation), RelativeSource={RelativeSource AncestorType=TabControl}}" Value="True">
                            <Setter Property="MaxWidth" Value="{Binding Path=(themes1:FrbTabControl.MaxTabWidth), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="themes1:FrbTabControl.MaxTabWidth">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource TabItemWidthMultiConverter}">
                    <!--  Bind the ActualWidth of the TabControl  -->
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                    <!--  Bind the number of TabItems (Items.Count)  -->
                    <Binding Path="Items.Count" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>

    </Style>



    <Style BasedOn="{StaticResource {x:Type wpfdataui:DataUiGrid}}" TargetType="{x:Type wpfdataui:DataUiGrid}">
        <Style.Resources>
            <DataTemplate x:Key="DataUi.InstanceMemberTemplate" DataType="{x:Type wpfdatauiTypes:InstanceMember}">
                <wpfdataui:SingleDataUiContainer DataContext="{Binding}" />
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type wpfdatauiTypes:MemberCategory}">
                    <Expander Header="{Binding Name}" IsExpanded="True">
                        <Expander.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock
                                    VerticalAlignment="Center"
                                    FontSize="14"
                                    Text="{Binding}"
                                    Typography.Capitals="AllSmallCaps" />
                            </DataTemplate>
                        </Expander.HeaderTemplate>
                        <ItemsControl
                            AlternationCount="2"
                            ItemTemplate="{DynamicResource DataUi.InstanceMemberTemplate}"
                            ItemsSource="{Binding Members}" />
                    </Expander>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls1:ToggleButtonOptionDisplay}">
        <Style.Resources>
            <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Image, Converter={StaticResource NotNullToBoolConverter}}" Value="True">
                        <Setter Property="BorderThickness" Value="2" />
                        <Setter Property="BorderBrush" Value="Transparent" />
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                            <Condition Binding="{Binding Image, Converter={StaticResource NotNullToBoolConverter}}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{DynamicResource Frb.Brushes.Primary}" />
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding IconName, Converter={StaticResource NotNullToBoolConverter}}" Value="True">
                        <Setter Property="BorderThickness" Value="0" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding GumIconName, Converter={StaticResource NotNullToBoolConverter}}" Value="True">
                        <Setter Property="BorderThickness" Value="0" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>